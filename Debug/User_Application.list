
User_Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000232c  08008188  08008188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800a4b4  0800a4b4  000034b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4cc  0800a4cc  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4cc  0800a4cc  000034cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4d4  0800a4d4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4d4  0800a4d4  000034d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a4d8  0800a4d8  000034d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800a4dc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          000000c0  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000cc  200000cc  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bfae  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a38  00000000  00000000  0000ffea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc8  00000000  00000000  00011a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000937  00000000  00000000  000125f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000204a4  00000000  00000000  00012f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dbed  00000000  00000000  000333cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7673  00000000  00000000  00040fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010862b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003150  00000000  00000000  00108670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  0010b7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008188 <__do_global_dtors_aux>:
 8008188:	b510      	push	{r4, lr}
 800818a:	4c05      	ldr	r4, [pc, #20]	@ (80081a0 <__do_global_dtors_aux+0x18>)
 800818c:	7823      	ldrb	r3, [r4, #0]
 800818e:	b933      	cbnz	r3, 800819e <__do_global_dtors_aux+0x16>
 8008190:	4b04      	ldr	r3, [pc, #16]	@ (80081a4 <__do_global_dtors_aux+0x1c>)
 8008192:	b113      	cbz	r3, 800819a <__do_global_dtors_aux+0x12>
 8008194:	4804      	ldr	r0, [pc, #16]	@ (80081a8 <__do_global_dtors_aux+0x20>)
 8008196:	f3af 8000 	nop.w
 800819a:	2301      	movs	r3, #1
 800819c:	7023      	strb	r3, [r4, #0]
 800819e:	bd10      	pop	{r4, pc}
 80081a0:	2000000c 	.word	0x2000000c
 80081a4:	00000000 	.word	0x00000000
 80081a8:	0800a49c 	.word	0x0800a49c

080081ac <frame_dummy>:
 80081ac:	b508      	push	{r3, lr}
 80081ae:	4b03      	ldr	r3, [pc, #12]	@ (80081bc <frame_dummy+0x10>)
 80081b0:	b11b      	cbz	r3, 80081ba <frame_dummy+0xe>
 80081b2:	4903      	ldr	r1, [pc, #12]	@ (80081c0 <frame_dummy+0x14>)
 80081b4:	4803      	ldr	r0, [pc, #12]	@ (80081c4 <frame_dummy+0x18>)
 80081b6:	f3af 8000 	nop.w
 80081ba:	bd08      	pop	{r3, pc}
 80081bc:	00000000 	.word	0x00000000
 80081c0:	20000010 	.word	0x20000010
 80081c4:	0800a49c 	.word	0x0800a49c

080081c8 <__aeabi_uldivmod>:
 80081c8:	b953      	cbnz	r3, 80081e0 <__aeabi_uldivmod+0x18>
 80081ca:	b94a      	cbnz	r2, 80081e0 <__aeabi_uldivmod+0x18>
 80081cc:	2900      	cmp	r1, #0
 80081ce:	bf08      	it	eq
 80081d0:	2800      	cmpeq	r0, #0
 80081d2:	bf1c      	itt	ne
 80081d4:	f04f 31ff 	movne.w	r1, #4294967295
 80081d8:	f04f 30ff 	movne.w	r0, #4294967295
 80081dc:	f000 b96a 	b.w	80084b4 <__aeabi_idiv0>
 80081e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80081e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80081e8:	f000 f806 	bl	80081f8 <__udivmoddi4>
 80081ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80081f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081f4:	b004      	add	sp, #16
 80081f6:	4770      	bx	lr

080081f8 <__udivmoddi4>:
 80081f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081fc:	9d08      	ldr	r5, [sp, #32]
 80081fe:	460c      	mov	r4, r1
 8008200:	2b00      	cmp	r3, #0
 8008202:	d14e      	bne.n	80082a2 <__udivmoddi4+0xaa>
 8008204:	4694      	mov	ip, r2
 8008206:	458c      	cmp	ip, r1
 8008208:	4686      	mov	lr, r0
 800820a:	fab2 f282 	clz	r2, r2
 800820e:	d962      	bls.n	80082d6 <__udivmoddi4+0xde>
 8008210:	b14a      	cbz	r2, 8008226 <__udivmoddi4+0x2e>
 8008212:	f1c2 0320 	rsb	r3, r2, #32
 8008216:	4091      	lsls	r1, r2
 8008218:	fa20 f303 	lsr.w	r3, r0, r3
 800821c:	fa0c fc02 	lsl.w	ip, ip, r2
 8008220:	4319      	orrs	r1, r3
 8008222:	fa00 fe02 	lsl.w	lr, r0, r2
 8008226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800822a:	fa1f f68c 	uxth.w	r6, ip
 800822e:	fbb1 f4f7 	udiv	r4, r1, r7
 8008232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8008236:	fb07 1114 	mls	r1, r7, r4, r1
 800823a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800823e:	fb04 f106 	mul.w	r1, r4, r6
 8008242:	4299      	cmp	r1, r3
 8008244:	d90a      	bls.n	800825c <__udivmoddi4+0x64>
 8008246:	eb1c 0303 	adds.w	r3, ip, r3
 800824a:	f104 30ff 	add.w	r0, r4, #4294967295
 800824e:	f080 8112 	bcs.w	8008476 <__udivmoddi4+0x27e>
 8008252:	4299      	cmp	r1, r3
 8008254:	f240 810f 	bls.w	8008476 <__udivmoddi4+0x27e>
 8008258:	3c02      	subs	r4, #2
 800825a:	4463      	add	r3, ip
 800825c:	1a59      	subs	r1, r3, r1
 800825e:	fa1f f38e 	uxth.w	r3, lr
 8008262:	fbb1 f0f7 	udiv	r0, r1, r7
 8008266:	fb07 1110 	mls	r1, r7, r0, r1
 800826a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800826e:	fb00 f606 	mul.w	r6, r0, r6
 8008272:	429e      	cmp	r6, r3
 8008274:	d90a      	bls.n	800828c <__udivmoddi4+0x94>
 8008276:	eb1c 0303 	adds.w	r3, ip, r3
 800827a:	f100 31ff 	add.w	r1, r0, #4294967295
 800827e:	f080 80fc 	bcs.w	800847a <__udivmoddi4+0x282>
 8008282:	429e      	cmp	r6, r3
 8008284:	f240 80f9 	bls.w	800847a <__udivmoddi4+0x282>
 8008288:	4463      	add	r3, ip
 800828a:	3802      	subs	r0, #2
 800828c:	1b9b      	subs	r3, r3, r6
 800828e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8008292:	2100      	movs	r1, #0
 8008294:	b11d      	cbz	r5, 800829e <__udivmoddi4+0xa6>
 8008296:	40d3      	lsrs	r3, r2
 8008298:	2200      	movs	r2, #0
 800829a:	e9c5 3200 	strd	r3, r2, [r5]
 800829e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082a2:	428b      	cmp	r3, r1
 80082a4:	d905      	bls.n	80082b2 <__udivmoddi4+0xba>
 80082a6:	b10d      	cbz	r5, 80082ac <__udivmoddi4+0xb4>
 80082a8:	e9c5 0100 	strd	r0, r1, [r5]
 80082ac:	2100      	movs	r1, #0
 80082ae:	4608      	mov	r0, r1
 80082b0:	e7f5      	b.n	800829e <__udivmoddi4+0xa6>
 80082b2:	fab3 f183 	clz	r1, r3
 80082b6:	2900      	cmp	r1, #0
 80082b8:	d146      	bne.n	8008348 <__udivmoddi4+0x150>
 80082ba:	42a3      	cmp	r3, r4
 80082bc:	d302      	bcc.n	80082c4 <__udivmoddi4+0xcc>
 80082be:	4290      	cmp	r0, r2
 80082c0:	f0c0 80f0 	bcc.w	80084a4 <__udivmoddi4+0x2ac>
 80082c4:	1a86      	subs	r6, r0, r2
 80082c6:	eb64 0303 	sbc.w	r3, r4, r3
 80082ca:	2001      	movs	r0, #1
 80082cc:	2d00      	cmp	r5, #0
 80082ce:	d0e6      	beq.n	800829e <__udivmoddi4+0xa6>
 80082d0:	e9c5 6300 	strd	r6, r3, [r5]
 80082d4:	e7e3      	b.n	800829e <__udivmoddi4+0xa6>
 80082d6:	2a00      	cmp	r2, #0
 80082d8:	f040 8090 	bne.w	80083fc <__udivmoddi4+0x204>
 80082dc:	eba1 040c 	sub.w	r4, r1, ip
 80082e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80082e4:	fa1f f78c 	uxth.w	r7, ip
 80082e8:	2101      	movs	r1, #1
 80082ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80082ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80082f2:	fb08 4416 	mls	r4, r8, r6, r4
 80082f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80082fa:	fb07 f006 	mul.w	r0, r7, r6
 80082fe:	4298      	cmp	r0, r3
 8008300:	d908      	bls.n	8008314 <__udivmoddi4+0x11c>
 8008302:	eb1c 0303 	adds.w	r3, ip, r3
 8008306:	f106 34ff 	add.w	r4, r6, #4294967295
 800830a:	d202      	bcs.n	8008312 <__udivmoddi4+0x11a>
 800830c:	4298      	cmp	r0, r3
 800830e:	f200 80cd 	bhi.w	80084ac <__udivmoddi4+0x2b4>
 8008312:	4626      	mov	r6, r4
 8008314:	1a1c      	subs	r4, r3, r0
 8008316:	fa1f f38e 	uxth.w	r3, lr
 800831a:	fbb4 f0f8 	udiv	r0, r4, r8
 800831e:	fb08 4410 	mls	r4, r8, r0, r4
 8008322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008326:	fb00 f707 	mul.w	r7, r0, r7
 800832a:	429f      	cmp	r7, r3
 800832c:	d908      	bls.n	8008340 <__udivmoddi4+0x148>
 800832e:	eb1c 0303 	adds.w	r3, ip, r3
 8008332:	f100 34ff 	add.w	r4, r0, #4294967295
 8008336:	d202      	bcs.n	800833e <__udivmoddi4+0x146>
 8008338:	429f      	cmp	r7, r3
 800833a:	f200 80b0 	bhi.w	800849e <__udivmoddi4+0x2a6>
 800833e:	4620      	mov	r0, r4
 8008340:	1bdb      	subs	r3, r3, r7
 8008342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008346:	e7a5      	b.n	8008294 <__udivmoddi4+0x9c>
 8008348:	f1c1 0620 	rsb	r6, r1, #32
 800834c:	408b      	lsls	r3, r1
 800834e:	fa22 f706 	lsr.w	r7, r2, r6
 8008352:	431f      	orrs	r7, r3
 8008354:	fa20 fc06 	lsr.w	ip, r0, r6
 8008358:	fa04 f301 	lsl.w	r3, r4, r1
 800835c:	ea43 030c 	orr.w	r3, r3, ip
 8008360:	40f4      	lsrs	r4, r6
 8008362:	fa00 f801 	lsl.w	r8, r0, r1
 8008366:	0c38      	lsrs	r0, r7, #16
 8008368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800836c:	fbb4 fef0 	udiv	lr, r4, r0
 8008370:	fa1f fc87 	uxth.w	ip, r7
 8008374:	fb00 441e 	mls	r4, r0, lr, r4
 8008378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800837c:	fb0e f90c 	mul.w	r9, lr, ip
 8008380:	45a1      	cmp	r9, r4
 8008382:	fa02 f201 	lsl.w	r2, r2, r1
 8008386:	d90a      	bls.n	800839e <__udivmoddi4+0x1a6>
 8008388:	193c      	adds	r4, r7, r4
 800838a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800838e:	f080 8084 	bcs.w	800849a <__udivmoddi4+0x2a2>
 8008392:	45a1      	cmp	r9, r4
 8008394:	f240 8081 	bls.w	800849a <__udivmoddi4+0x2a2>
 8008398:	f1ae 0e02 	sub.w	lr, lr, #2
 800839c:	443c      	add	r4, r7
 800839e:	eba4 0409 	sub.w	r4, r4, r9
 80083a2:	fa1f f983 	uxth.w	r9, r3
 80083a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80083aa:	fb00 4413 	mls	r4, r0, r3, r4
 80083ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80083b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80083b6:	45a4      	cmp	ip, r4
 80083b8:	d907      	bls.n	80083ca <__udivmoddi4+0x1d2>
 80083ba:	193c      	adds	r4, r7, r4
 80083bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80083c0:	d267      	bcs.n	8008492 <__udivmoddi4+0x29a>
 80083c2:	45a4      	cmp	ip, r4
 80083c4:	d965      	bls.n	8008492 <__udivmoddi4+0x29a>
 80083c6:	3b02      	subs	r3, #2
 80083c8:	443c      	add	r4, r7
 80083ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80083ce:	fba0 9302 	umull	r9, r3, r0, r2
 80083d2:	eba4 040c 	sub.w	r4, r4, ip
 80083d6:	429c      	cmp	r4, r3
 80083d8:	46ce      	mov	lr, r9
 80083da:	469c      	mov	ip, r3
 80083dc:	d351      	bcc.n	8008482 <__udivmoddi4+0x28a>
 80083de:	d04e      	beq.n	800847e <__udivmoddi4+0x286>
 80083e0:	b155      	cbz	r5, 80083f8 <__udivmoddi4+0x200>
 80083e2:	ebb8 030e 	subs.w	r3, r8, lr
 80083e6:	eb64 040c 	sbc.w	r4, r4, ip
 80083ea:	fa04 f606 	lsl.w	r6, r4, r6
 80083ee:	40cb      	lsrs	r3, r1
 80083f0:	431e      	orrs	r6, r3
 80083f2:	40cc      	lsrs	r4, r1
 80083f4:	e9c5 6400 	strd	r6, r4, [r5]
 80083f8:	2100      	movs	r1, #0
 80083fa:	e750      	b.n	800829e <__udivmoddi4+0xa6>
 80083fc:	f1c2 0320 	rsb	r3, r2, #32
 8008400:	fa20 f103 	lsr.w	r1, r0, r3
 8008404:	fa0c fc02 	lsl.w	ip, ip, r2
 8008408:	fa24 f303 	lsr.w	r3, r4, r3
 800840c:	4094      	lsls	r4, r2
 800840e:	430c      	orrs	r4, r1
 8008410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008414:	fa00 fe02 	lsl.w	lr, r0, r2
 8008418:	fa1f f78c 	uxth.w	r7, ip
 800841c:	fbb3 f0f8 	udiv	r0, r3, r8
 8008420:	fb08 3110 	mls	r1, r8, r0, r3
 8008424:	0c23      	lsrs	r3, r4, #16
 8008426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800842a:	fb00 f107 	mul.w	r1, r0, r7
 800842e:	4299      	cmp	r1, r3
 8008430:	d908      	bls.n	8008444 <__udivmoddi4+0x24c>
 8008432:	eb1c 0303 	adds.w	r3, ip, r3
 8008436:	f100 36ff 	add.w	r6, r0, #4294967295
 800843a:	d22c      	bcs.n	8008496 <__udivmoddi4+0x29e>
 800843c:	4299      	cmp	r1, r3
 800843e:	d92a      	bls.n	8008496 <__udivmoddi4+0x29e>
 8008440:	3802      	subs	r0, #2
 8008442:	4463      	add	r3, ip
 8008444:	1a5b      	subs	r3, r3, r1
 8008446:	b2a4      	uxth	r4, r4
 8008448:	fbb3 f1f8 	udiv	r1, r3, r8
 800844c:	fb08 3311 	mls	r3, r8, r1, r3
 8008450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008454:	fb01 f307 	mul.w	r3, r1, r7
 8008458:	42a3      	cmp	r3, r4
 800845a:	d908      	bls.n	800846e <__udivmoddi4+0x276>
 800845c:	eb1c 0404 	adds.w	r4, ip, r4
 8008460:	f101 36ff 	add.w	r6, r1, #4294967295
 8008464:	d213      	bcs.n	800848e <__udivmoddi4+0x296>
 8008466:	42a3      	cmp	r3, r4
 8008468:	d911      	bls.n	800848e <__udivmoddi4+0x296>
 800846a:	3902      	subs	r1, #2
 800846c:	4464      	add	r4, ip
 800846e:	1ae4      	subs	r4, r4, r3
 8008470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008474:	e739      	b.n	80082ea <__udivmoddi4+0xf2>
 8008476:	4604      	mov	r4, r0
 8008478:	e6f0      	b.n	800825c <__udivmoddi4+0x64>
 800847a:	4608      	mov	r0, r1
 800847c:	e706      	b.n	800828c <__udivmoddi4+0x94>
 800847e:	45c8      	cmp	r8, r9
 8008480:	d2ae      	bcs.n	80083e0 <__udivmoddi4+0x1e8>
 8008482:	ebb9 0e02 	subs.w	lr, r9, r2
 8008486:	eb63 0c07 	sbc.w	ip, r3, r7
 800848a:	3801      	subs	r0, #1
 800848c:	e7a8      	b.n	80083e0 <__udivmoddi4+0x1e8>
 800848e:	4631      	mov	r1, r6
 8008490:	e7ed      	b.n	800846e <__udivmoddi4+0x276>
 8008492:	4603      	mov	r3, r0
 8008494:	e799      	b.n	80083ca <__udivmoddi4+0x1d2>
 8008496:	4630      	mov	r0, r6
 8008498:	e7d4      	b.n	8008444 <__udivmoddi4+0x24c>
 800849a:	46d6      	mov	lr, sl
 800849c:	e77f      	b.n	800839e <__udivmoddi4+0x1a6>
 800849e:	4463      	add	r3, ip
 80084a0:	3802      	subs	r0, #2
 80084a2:	e74d      	b.n	8008340 <__udivmoddi4+0x148>
 80084a4:	4606      	mov	r6, r0
 80084a6:	4623      	mov	r3, r4
 80084a8:	4608      	mov	r0, r1
 80084aa:	e70f      	b.n	80082cc <__udivmoddi4+0xd4>
 80084ac:	3e02      	subs	r6, #2
 80084ae:	4463      	add	r3, ip
 80084b0:	e730      	b.n	8008314 <__udivmoddi4+0x11c>
 80084b2:	bf00      	nop

080084b4 <__aeabi_idiv0>:
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop

080084b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80084bc:	f000 faa6 	bl	8008a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80084c0:	f000 f80e 	bl	80084e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80084c4:	f000 f8e2 	bl	800868c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80084c8:	f000 f8b6 	bl	8008638 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80084cc:	f000 f866 	bl	800859c <MX_TIM2_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  setFlags();
 80084d0:	f000 fa1a 	bl	8008908 <setFlags>
	  timerMissions();
 80084d4:	f000 f934 	bl	8008740 <timerMissions>
	  clearFlags();
 80084d8:	f000 fa48 	bl	800896c <clearFlags>
	  setFlags();
 80084dc:	bf00      	nop
 80084de:	e7f7      	b.n	80084d0 <main+0x18>

080084e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b094      	sub	sp, #80	@ 0x50
 80084e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80084e6:	f107 0320 	add.w	r3, r7, #32
 80084ea:	2230      	movs	r2, #48	@ 0x30
 80084ec:	2100      	movs	r1, #0
 80084ee:	4618      	mov	r0, r3
 80084f0:	f001 ffa8 	bl	800a444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80084f4:	f107 030c 	add.w	r3, r7, #12
 80084f8:	2200      	movs	r2, #0
 80084fa:	601a      	str	r2, [r3, #0]
 80084fc:	605a      	str	r2, [r3, #4]
 80084fe:	609a      	str	r2, [r3, #8]
 8008500:	60da      	str	r2, [r3, #12]
 8008502:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008504:	2300      	movs	r3, #0
 8008506:	60bb      	str	r3, [r7, #8]
 8008508:	4b22      	ldr	r3, [pc, #136]	@ (8008594 <SystemClock_Config+0xb4>)
 800850a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800850c:	4a21      	ldr	r2, [pc, #132]	@ (8008594 <SystemClock_Config+0xb4>)
 800850e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008512:	6413      	str	r3, [r2, #64]	@ 0x40
 8008514:	4b1f      	ldr	r3, [pc, #124]	@ (8008594 <SystemClock_Config+0xb4>)
 8008516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008518:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800851c:	60bb      	str	r3, [r7, #8]
 800851e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008520:	2300      	movs	r3, #0
 8008522:	607b      	str	r3, [r7, #4]
 8008524:	4b1c      	ldr	r3, [pc, #112]	@ (8008598 <SystemClock_Config+0xb8>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a1b      	ldr	r2, [pc, #108]	@ (8008598 <SystemClock_Config+0xb8>)
 800852a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800852e:	6013      	str	r3, [r2, #0]
 8008530:	4b19      	ldr	r3, [pc, #100]	@ (8008598 <SystemClock_Config+0xb8>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008538:	607b      	str	r3, [r7, #4]
 800853a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800853c:	2302      	movs	r3, #2
 800853e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008540:	2301      	movs	r3, #1
 8008542:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008544:	2310      	movs	r3, #16
 8008546:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8008548:	2300      	movs	r3, #0
 800854a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800854c:	f107 0320 	add.w	r3, r7, #32
 8008550:	4618      	mov	r0, r3
 8008552:	f000 fd83 	bl	800905c <HAL_RCC_OscConfig>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d001      	beq.n	8008560 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800855c:	f000 f8ea 	bl	8008734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008560:	230f      	movs	r3, #15
 8008562:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8008564:	2300      	movs	r3, #0
 8008566:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008568:	2300      	movs	r3, #0
 800856a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800856c:	2300      	movs	r3, #0
 800856e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008570:	2300      	movs	r3, #0
 8008572:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8008574:	f107 030c 	add.w	r3, r7, #12
 8008578:	2100      	movs	r1, #0
 800857a:	4618      	mov	r0, r3
 800857c:	f000 ffe6 	bl	800954c <HAL_RCC_ClockConfig>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d001      	beq.n	800858a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8008586:	f000 f8d5 	bl	8008734 <Error_Handler>
  }
}
 800858a:	bf00      	nop
 800858c:	3750      	adds	r7, #80	@ 0x50
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	40023800 	.word	0x40023800
 8008598:	40007000 	.word	0x40007000

0800859c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b086      	sub	sp, #24
 80085a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80085a2:	f107 0308 	add.w	r3, r7, #8
 80085a6:	2200      	movs	r2, #0
 80085a8:	601a      	str	r2, [r3, #0]
 80085aa:	605a      	str	r2, [r3, #4]
 80085ac:	609a      	str	r2, [r3, #8]
 80085ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80085b0:	463b      	mov	r3, r7
 80085b2:	2200      	movs	r2, #0
 80085b4:	601a      	str	r2, [r3, #0]
 80085b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80085b8:	4b1e      	ldr	r3, [pc, #120]	@ (8008634 <MX_TIM2_Init+0x98>)
 80085ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80085be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 80085c0:	4b1c      	ldr	r3, [pc, #112]	@ (8008634 <MX_TIM2_Init+0x98>)
 80085c2:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80085c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80085c8:	4b1a      	ldr	r3, [pc, #104]	@ (8008634 <MX_TIM2_Init+0x98>)
 80085ca:	2200      	movs	r2, #0
 80085cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80085ce:	4b19      	ldr	r3, [pc, #100]	@ (8008634 <MX_TIM2_Init+0x98>)
 80085d0:	f04f 32ff 	mov.w	r2, #4294967295
 80085d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80085d6:	4b17      	ldr	r3, [pc, #92]	@ (8008634 <MX_TIM2_Init+0x98>)
 80085d8:	2200      	movs	r2, #0
 80085da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80085dc:	4b15      	ldr	r3, [pc, #84]	@ (8008634 <MX_TIM2_Init+0x98>)
 80085de:	2200      	movs	r2, #0
 80085e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80085e2:	4814      	ldr	r0, [pc, #80]	@ (8008634 <MX_TIM2_Init+0x98>)
 80085e4:	f001 f992 	bl	800990c <HAL_TIM_Base_Init>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d001      	beq.n	80085f2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80085ee:	f000 f8a1 	bl	8008734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80085f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80085f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80085f8:	f107 0308 	add.w	r3, r7, #8
 80085fc:	4619      	mov	r1, r3
 80085fe:	480d      	ldr	r0, [pc, #52]	@ (8008634 <MX_TIM2_Init+0x98>)
 8008600:	f001 f9d3 	bl	80099aa <HAL_TIM_ConfigClockSource>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d001      	beq.n	800860e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800860a:	f000 f893 	bl	8008734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800860e:	2300      	movs	r3, #0
 8008610:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008612:	2300      	movs	r3, #0
 8008614:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008616:	463b      	mov	r3, r7
 8008618:	4619      	mov	r1, r3
 800861a:	4806      	ldr	r0, [pc, #24]	@ (8008634 <MX_TIM2_Init+0x98>)
 800861c:	f001 fbd2 	bl	8009dc4 <HAL_TIMEx_MasterConfigSynchronization>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d001      	beq.n	800862a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8008626:	f000 f885 	bl	8008734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800862a:	bf00      	nop
 800862c:	3718      	adds	r7, #24
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	20000028 	.word	0x20000028

08008638 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800863c:	4b11      	ldr	r3, [pc, #68]	@ (8008684 <MX_USART2_UART_Init+0x4c>)
 800863e:	4a12      	ldr	r2, [pc, #72]	@ (8008688 <MX_USART2_UART_Init+0x50>)
 8008640:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8008642:	4b10      	ldr	r3, [pc, #64]	@ (8008684 <MX_USART2_UART_Init+0x4c>)
 8008644:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8008648:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800864a:	4b0e      	ldr	r3, [pc, #56]	@ (8008684 <MX_USART2_UART_Init+0x4c>)
 800864c:	2200      	movs	r2, #0
 800864e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008650:	4b0c      	ldr	r3, [pc, #48]	@ (8008684 <MX_USART2_UART_Init+0x4c>)
 8008652:	2200      	movs	r2, #0
 8008654:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008656:	4b0b      	ldr	r3, [pc, #44]	@ (8008684 <MX_USART2_UART_Init+0x4c>)
 8008658:	2200      	movs	r2, #0
 800865a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800865c:	4b09      	ldr	r3, [pc, #36]	@ (8008684 <MX_USART2_UART_Init+0x4c>)
 800865e:	220c      	movs	r2, #12
 8008660:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008662:	4b08      	ldr	r3, [pc, #32]	@ (8008684 <MX_USART2_UART_Init+0x4c>)
 8008664:	2200      	movs	r2, #0
 8008666:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008668:	4b06      	ldr	r3, [pc, #24]	@ (8008684 <MX_USART2_UART_Init+0x4c>)
 800866a:	2200      	movs	r2, #0
 800866c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800866e:	4805      	ldr	r0, [pc, #20]	@ (8008684 <MX_USART2_UART_Init+0x4c>)
 8008670:	f001 fc24 	bl	8009ebc <HAL_UART_Init>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d001      	beq.n	800867e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800867a:	f000 f85b 	bl	8008734 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800867e:	bf00      	nop
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	20000070 	.word	0x20000070
 8008688:	40004400 	.word	0x40004400

0800868c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b088      	sub	sp, #32
 8008690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008692:	f107 030c 	add.w	r3, r7, #12
 8008696:	2200      	movs	r2, #0
 8008698:	601a      	str	r2, [r3, #0]
 800869a:	605a      	str	r2, [r3, #4]
 800869c:	609a      	str	r2, [r3, #8]
 800869e:	60da      	str	r2, [r3, #12]
 80086a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80086a2:	2300      	movs	r3, #0
 80086a4:	60bb      	str	r3, [r7, #8]
 80086a6:	4b21      	ldr	r3, [pc, #132]	@ (800872c <MX_GPIO_Init+0xa0>)
 80086a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086aa:	4a20      	ldr	r2, [pc, #128]	@ (800872c <MX_GPIO_Init+0xa0>)
 80086ac:	f043 0301 	orr.w	r3, r3, #1
 80086b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80086b2:	4b1e      	ldr	r3, [pc, #120]	@ (800872c <MX_GPIO_Init+0xa0>)
 80086b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086b6:	f003 0301 	and.w	r3, r3, #1
 80086ba:	60bb      	str	r3, [r7, #8]
 80086bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80086be:	2300      	movs	r3, #0
 80086c0:	607b      	str	r3, [r7, #4]
 80086c2:	4b1a      	ldr	r3, [pc, #104]	@ (800872c <MX_GPIO_Init+0xa0>)
 80086c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086c6:	4a19      	ldr	r2, [pc, #100]	@ (800872c <MX_GPIO_Init+0xa0>)
 80086c8:	f043 0308 	orr.w	r3, r3, #8
 80086cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80086ce:	4b17      	ldr	r3, [pc, #92]	@ (800872c <MX_GPIO_Init+0xa0>)
 80086d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086d2:	f003 0308 	and.w	r3, r3, #8
 80086d6:	607b      	str	r3, [r7, #4]
 80086d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 80086da:	2200      	movs	r2, #0
 80086dc:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80086e0:	4813      	ldr	r0, [pc, #76]	@ (8008730 <MX_GPIO_Init+0xa4>)
 80086e2:	f000 fc87 	bl	8008ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80086e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80086ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80086ec:	2301      	movs	r3, #1
 80086ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086f0:	2300      	movs	r3, #0
 80086f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80086f4:	2301      	movs	r3, #1
 80086f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80086f8:	f107 030c 	add.w	r3, r7, #12
 80086fc:	4619      	mov	r1, r3
 80086fe:	480c      	ldr	r0, [pc, #48]	@ (8008730 <MX_GPIO_Init+0xa4>)
 8008700:	f000 fadc 	bl	8008cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|LED4_Pin;
 8008704:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8008708:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800870a:	2301      	movs	r3, #1
 800870c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800870e:	2300      	movs	r3, #0
 8008710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008712:	2300      	movs	r3, #0
 8008714:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008716:	f107 030c 	add.w	r3, r7, #12
 800871a:	4619      	mov	r1, r3
 800871c:	4804      	ldr	r0, [pc, #16]	@ (8008730 <MX_GPIO_Init+0xa4>)
 800871e:	f000 facd 	bl	8008cbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008722:	bf00      	nop
 8008724:	3720      	adds	r7, #32
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	40023800 	.word	0x40023800
 8008730:	40020c00 	.word	0x40020c00

08008734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008734:	b480      	push	{r7}
 8008736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008738:	b672      	cpsid	i
}
 800873a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800873c:	bf00      	nop
 800873e:	e7fd      	b.n	800873c <Error_Handler+0x8>

08008740 <timerMissions>:
// mission.c
#include "timer.h"
#include "macro.h"

void timerMissions()
{
 8008740:	b580      	push	{r7, lr}
 8008742:	af00      	add	r7, sp, #0
    // Eğer 100 ms bayrağı kalktıysa, LED1'i yak
    if (flag100ms) {
 8008744:	4b05      	ldr	r3, [pc, #20]	@ (800875c <timerMissions+0x1c>)
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	b2db      	uxtb	r3, r3
 800874a:	2b00      	cmp	r3, #0
 800874c:	d004      	beq.n	8008758 <timerMissions+0x18>
        TOGGLE_PIN(LED1);  // LED1-MAVİ
 800874e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008752:	4803      	ldr	r0, [pc, #12]	@ (8008760 <timerMissions+0x20>)
 8008754:	f000 fc67 	bl	8009026 <HAL_GPIO_TogglePin>
//
//    // Eğer 500 ms bayrağı kalktıysa, LED3'ü yak
//    if (flag500ms) {
//        TOGGLE_PIN(LED4);  // LED4-TURUNCU
//    }
}
 8008758:	bf00      	nop
 800875a:	bd80      	pop	{r7, pc}
 800875c:	200000b8 	.word	0x200000b8
 8008760:	40020c00 	.word	0x40020c00

08008764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800876a:	2300      	movs	r3, #0
 800876c:	607b      	str	r3, [r7, #4]
 800876e:	4b10      	ldr	r3, [pc, #64]	@ (80087b0 <HAL_MspInit+0x4c>)
 8008770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008772:	4a0f      	ldr	r2, [pc, #60]	@ (80087b0 <HAL_MspInit+0x4c>)
 8008774:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008778:	6453      	str	r3, [r2, #68]	@ 0x44
 800877a:	4b0d      	ldr	r3, [pc, #52]	@ (80087b0 <HAL_MspInit+0x4c>)
 800877c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800877e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008782:	607b      	str	r3, [r7, #4]
 8008784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008786:	2300      	movs	r3, #0
 8008788:	603b      	str	r3, [r7, #0]
 800878a:	4b09      	ldr	r3, [pc, #36]	@ (80087b0 <HAL_MspInit+0x4c>)
 800878c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800878e:	4a08      	ldr	r2, [pc, #32]	@ (80087b0 <HAL_MspInit+0x4c>)
 8008790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008794:	6413      	str	r3, [r2, #64]	@ 0x40
 8008796:	4b06      	ldr	r3, [pc, #24]	@ (80087b0 <HAL_MspInit+0x4c>)
 8008798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800879a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800879e:	603b      	str	r3, [r7, #0]
 80087a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80087a2:	bf00      	nop
 80087a4:	370c      	adds	r7, #12
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	40023800 	.word	0x40023800

080087b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087c4:	d10d      	bne.n	80087e2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80087c6:	2300      	movs	r3, #0
 80087c8:	60fb      	str	r3, [r7, #12]
 80087ca:	4b09      	ldr	r3, [pc, #36]	@ (80087f0 <HAL_TIM_Base_MspInit+0x3c>)
 80087cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ce:	4a08      	ldr	r2, [pc, #32]	@ (80087f0 <HAL_TIM_Base_MspInit+0x3c>)
 80087d0:	f043 0301 	orr.w	r3, r3, #1
 80087d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80087d6:	4b06      	ldr	r3, [pc, #24]	@ (80087f0 <HAL_TIM_Base_MspInit+0x3c>)
 80087d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087da:	f003 0301 	and.w	r3, r3, #1
 80087de:	60fb      	str	r3, [r7, #12]
 80087e0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80087e2:	bf00      	nop
 80087e4:	3714      	adds	r7, #20
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	40023800 	.word	0x40023800

080087f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b08a      	sub	sp, #40	@ 0x28
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087fc:	f107 0314 	add.w	r3, r7, #20
 8008800:	2200      	movs	r2, #0
 8008802:	601a      	str	r2, [r3, #0]
 8008804:	605a      	str	r2, [r3, #4]
 8008806:	609a      	str	r2, [r3, #8]
 8008808:	60da      	str	r2, [r3, #12]
 800880a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a19      	ldr	r2, [pc, #100]	@ (8008878 <HAL_UART_MspInit+0x84>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d12b      	bne.n	800886e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008816:	2300      	movs	r3, #0
 8008818:	613b      	str	r3, [r7, #16]
 800881a:	4b18      	ldr	r3, [pc, #96]	@ (800887c <HAL_UART_MspInit+0x88>)
 800881c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800881e:	4a17      	ldr	r2, [pc, #92]	@ (800887c <HAL_UART_MspInit+0x88>)
 8008820:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008824:	6413      	str	r3, [r2, #64]	@ 0x40
 8008826:	4b15      	ldr	r3, [pc, #84]	@ (800887c <HAL_UART_MspInit+0x88>)
 8008828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800882a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800882e:	613b      	str	r3, [r7, #16]
 8008830:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008832:	2300      	movs	r3, #0
 8008834:	60fb      	str	r3, [r7, #12]
 8008836:	4b11      	ldr	r3, [pc, #68]	@ (800887c <HAL_UART_MspInit+0x88>)
 8008838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800883a:	4a10      	ldr	r2, [pc, #64]	@ (800887c <HAL_UART_MspInit+0x88>)
 800883c:	f043 0301 	orr.w	r3, r3, #1
 8008840:	6313      	str	r3, [r2, #48]	@ 0x30
 8008842:	4b0e      	ldr	r3, [pc, #56]	@ (800887c <HAL_UART_MspInit+0x88>)
 8008844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008846:	f003 0301 	and.w	r3, r3, #1
 800884a:	60fb      	str	r3, [r7, #12]
 800884c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800884e:	230c      	movs	r3, #12
 8008850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008852:	2302      	movs	r3, #2
 8008854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008856:	2300      	movs	r3, #0
 8008858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800885a:	2303      	movs	r3, #3
 800885c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800885e:	2307      	movs	r3, #7
 8008860:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008862:	f107 0314 	add.w	r3, r7, #20
 8008866:	4619      	mov	r1, r3
 8008868:	4805      	ldr	r0, [pc, #20]	@ (8008880 <HAL_UART_MspInit+0x8c>)
 800886a:	f000 fa27 	bl	8008cbc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800886e:	bf00      	nop
 8008870:	3728      	adds	r7, #40	@ 0x28
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	40004400 	.word	0x40004400
 800887c:	40023800 	.word	0x40023800
 8008880:	40020000 	.word	0x40020000

08008884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008884:	b480      	push	{r7}
 8008886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008888:	bf00      	nop
 800888a:	e7fd      	b.n	8008888 <NMI_Handler+0x4>

0800888c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800888c:	b480      	push	{r7}
 800888e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008890:	bf00      	nop
 8008892:	e7fd      	b.n	8008890 <HardFault_Handler+0x4>

08008894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008894:	b480      	push	{r7}
 8008896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008898:	bf00      	nop
 800889a:	e7fd      	b.n	8008898 <MemManage_Handler+0x4>

0800889c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800889c:	b480      	push	{r7}
 800889e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80088a0:	bf00      	nop
 80088a2:	e7fd      	b.n	80088a0 <BusFault_Handler+0x4>

080088a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80088a4:	b480      	push	{r7}
 80088a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80088a8:	bf00      	nop
 80088aa:	e7fd      	b.n	80088a8 <UsageFault_Handler+0x4>

080088ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80088ac:	b480      	push	{r7}
 80088ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80088b0:	bf00      	nop
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr

080088ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80088ba:	b480      	push	{r7}
 80088bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80088be:	bf00      	nop
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80088c8:	b480      	push	{r7}
 80088ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80088cc:	bf00      	nop
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr

080088d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80088da:	f000 f8e9 	bl	8008ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80088de:	bf00      	nop
 80088e0:	bd80      	pop	{r7, pc}
	...

080088e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80088e4:	b480      	push	{r7}
 80088e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80088e8:	4b06      	ldr	r3, [pc, #24]	@ (8008904 <SystemInit+0x20>)
 80088ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088ee:	4a05      	ldr	r2, [pc, #20]	@ (8008904 <SystemInit+0x20>)
 80088f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80088f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80088f8:	bf00      	nop
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	e000ed00 	.word	0xe000ed00

08008908 <setFlags>:
        counter200ms += 1;
        counter500ms += 1;
    }
}

void setFlags(){
 8008908:	b480      	push	{r7}
 800890a:	af00      	add	r7, sp, #0
    // 100 ms'de bir flag'i aktif et
    if (counter100ms >= 1) {
 800890c:	4b11      	ldr	r3, [pc, #68]	@ (8008954 <setFlags+0x4c>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d005      	beq.n	8008920 <setFlags+0x18>
        flag100ms = 1; // 100 ms bayrağını set et
 8008914:	4b10      	ldr	r3, [pc, #64]	@ (8008958 <setFlags+0x50>)
 8008916:	2201      	movs	r2, #1
 8008918:	701a      	strb	r2, [r3, #0]
        counter100ms = 0; // Sayaç sıfırla
 800891a:	4b0e      	ldr	r3, [pc, #56]	@ (8008954 <setFlags+0x4c>)
 800891c:	2200      	movs	r2, #0
 800891e:	601a      	str	r2, [r3, #0]
    }

    // 200 ms'de bir flag'i aktif et
    if (counter200ms >= 2) {
 8008920:	4b0e      	ldr	r3, [pc, #56]	@ (800895c <setFlags+0x54>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2b01      	cmp	r3, #1
 8008926:	d905      	bls.n	8008934 <setFlags+0x2c>
        flag200ms = 1; // 200 ms bayrağını set et
 8008928:	4b0d      	ldr	r3, [pc, #52]	@ (8008960 <setFlags+0x58>)
 800892a:	2201      	movs	r2, #1
 800892c:	701a      	strb	r2, [r3, #0]
        counter200ms = 0; // Sayaç sıfırla
 800892e:	4b0b      	ldr	r3, [pc, #44]	@ (800895c <setFlags+0x54>)
 8008930:	2200      	movs	r2, #0
 8008932:	601a      	str	r2, [r3, #0]
    }

    // 500 ms'de bir flag'i aktif et
    if (counter500ms >= 5) {
 8008934:	4b0b      	ldr	r3, [pc, #44]	@ (8008964 <setFlags+0x5c>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2b04      	cmp	r3, #4
 800893a:	d905      	bls.n	8008948 <setFlags+0x40>
        flag500ms = 1; // 500 ms bayrağını set et
 800893c:	4b0a      	ldr	r3, [pc, #40]	@ (8008968 <setFlags+0x60>)
 800893e:	2201      	movs	r2, #1
 8008940:	701a      	strb	r2, [r3, #0]
        counter500ms = 0; // Sayaç sıfırla
 8008942:	4b08      	ldr	r3, [pc, #32]	@ (8008964 <setFlags+0x5c>)
 8008944:	2200      	movs	r2, #0
 8008946:	601a      	str	r2, [r3, #0]
    }
}
 8008948:	bf00      	nop
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop
 8008954:	200000bc 	.word	0x200000bc
 8008958:	200000b8 	.word	0x200000b8
 800895c:	200000c0 	.word	0x200000c0
 8008960:	200000b9 	.word	0x200000b9
 8008964:	200000c4 	.word	0x200000c4
 8008968:	200000ba 	.word	0x200000ba

0800896c <clearFlags>:

void clearFlags()
{
 800896c:	b480      	push	{r7}
 800896e:	af00      	add	r7, sp, #0
    // Bayraklar kalktıysa sıfırlama fonksiyonu
    if (flag100ms) {
 8008970:	4b0e      	ldr	r3, [pc, #56]	@ (80089ac <clearFlags+0x40>)
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	b2db      	uxtb	r3, r3
 8008976:	2b00      	cmp	r3, #0
 8008978:	d002      	beq.n	8008980 <clearFlags+0x14>
        flag100ms = 0;  // 100 ms bayrağını sıfırla
 800897a:	4b0c      	ldr	r3, [pc, #48]	@ (80089ac <clearFlags+0x40>)
 800897c:	2200      	movs	r2, #0
 800897e:	701a      	strb	r2, [r3, #0]
    }

    if (flag200ms) {
 8008980:	4b0b      	ldr	r3, [pc, #44]	@ (80089b0 <clearFlags+0x44>)
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	b2db      	uxtb	r3, r3
 8008986:	2b00      	cmp	r3, #0
 8008988:	d002      	beq.n	8008990 <clearFlags+0x24>
        flag200ms = 0;  // 200 ms bayrağını sıfırla
 800898a:	4b09      	ldr	r3, [pc, #36]	@ (80089b0 <clearFlags+0x44>)
 800898c:	2200      	movs	r2, #0
 800898e:	701a      	strb	r2, [r3, #0]
    }

    if (flag500ms) {
 8008990:	4b08      	ldr	r3, [pc, #32]	@ (80089b4 <clearFlags+0x48>)
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	b2db      	uxtb	r3, r3
 8008996:	2b00      	cmp	r3, #0
 8008998:	d002      	beq.n	80089a0 <clearFlags+0x34>
        flag500ms = 0;  // 500 ms bayrağını sıfırla
 800899a:	4b06      	ldr	r3, [pc, #24]	@ (80089b4 <clearFlags+0x48>)
 800899c:	2200      	movs	r2, #0
 800899e:	701a      	strb	r2, [r3, #0]
    }
}
 80089a0:	bf00      	nop
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	200000b8 	.word	0x200000b8
 80089b0:	200000b9 	.word	0x200000b9
 80089b4:	200000ba 	.word	0x200000ba

080089b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80089b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80089f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80089bc:	f7ff ff92 	bl	80088e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80089c0:	480c      	ldr	r0, [pc, #48]	@ (80089f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80089c2:	490d      	ldr	r1, [pc, #52]	@ (80089f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80089c4:	4a0d      	ldr	r2, [pc, #52]	@ (80089fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80089c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80089c8:	e002      	b.n	80089d0 <LoopCopyDataInit>

080089ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80089ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80089cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80089ce:	3304      	adds	r3, #4

080089d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80089d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80089d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80089d4:	d3f9      	bcc.n	80089ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80089d6:	4a0a      	ldr	r2, [pc, #40]	@ (8008a00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80089d8:	4c0a      	ldr	r4, [pc, #40]	@ (8008a04 <LoopFillZerobss+0x22>)
  movs r3, #0
 80089da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80089dc:	e001      	b.n	80089e2 <LoopFillZerobss>

080089de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80089de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80089e0:	3204      	adds	r2, #4

080089e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80089e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80089e4:	d3fb      	bcc.n	80089de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80089e6:	f001 fd35 	bl	800a454 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80089ea:	f7ff fd65 	bl	80084b8 <main>
  bx  lr    
 80089ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80089f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80089f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80089f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80089fc:	0800a4dc 	.word	0x0800a4dc
  ldr r2, =_sbss
 8008a00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8008a04:	200000cc 	.word	0x200000cc

08008a08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008a08:	e7fe      	b.n	8008a08 <ADC_IRQHandler>
	...

08008a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008a10:	4b0e      	ldr	r3, [pc, #56]	@ (8008a4c <HAL_Init+0x40>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a0d      	ldr	r2, [pc, #52]	@ (8008a4c <HAL_Init+0x40>)
 8008a16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008a1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8008a4c <HAL_Init+0x40>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a0a      	ldr	r2, [pc, #40]	@ (8008a4c <HAL_Init+0x40>)
 8008a22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008a26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008a28:	4b08      	ldr	r3, [pc, #32]	@ (8008a4c <HAL_Init+0x40>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a07      	ldr	r2, [pc, #28]	@ (8008a4c <HAL_Init+0x40>)
 8008a2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008a34:	2003      	movs	r0, #3
 8008a36:	f000 f90d 	bl	8008c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008a3a:	200f      	movs	r0, #15
 8008a3c:	f000 f808 	bl	8008a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008a40:	f7ff fe90 	bl	8008764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	40023c00 	.word	0x40023c00

08008a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008a58:	4b12      	ldr	r3, [pc, #72]	@ (8008aa4 <HAL_InitTick+0x54>)
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	4b12      	ldr	r3, [pc, #72]	@ (8008aa8 <HAL_InitTick+0x58>)
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	4619      	mov	r1, r3
 8008a62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f000 f917 	bl	8008ca2 <HAL_SYSTICK_Config>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d001      	beq.n	8008a7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e00e      	b.n	8008a9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2b0f      	cmp	r3, #15
 8008a82:	d80a      	bhi.n	8008a9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008a84:	2200      	movs	r2, #0
 8008a86:	6879      	ldr	r1, [r7, #4]
 8008a88:	f04f 30ff 	mov.w	r0, #4294967295
 8008a8c:	f000 f8ed 	bl	8008c6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008a90:	4a06      	ldr	r2, [pc, #24]	@ (8008aac <HAL_InitTick+0x5c>)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008a96:	2300      	movs	r3, #0
 8008a98:	e000      	b.n	8008a9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	20000000 	.word	0x20000000
 8008aa8:	20000008 	.word	0x20000008
 8008aac:	20000004 	.word	0x20000004

08008ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008ab4:	4b06      	ldr	r3, [pc, #24]	@ (8008ad0 <HAL_IncTick+0x20>)
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	461a      	mov	r2, r3
 8008aba:	4b06      	ldr	r3, [pc, #24]	@ (8008ad4 <HAL_IncTick+0x24>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4413      	add	r3, r2
 8008ac0:	4a04      	ldr	r2, [pc, #16]	@ (8008ad4 <HAL_IncTick+0x24>)
 8008ac2:	6013      	str	r3, [r2, #0]
}
 8008ac4:	bf00      	nop
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	20000008 	.word	0x20000008
 8008ad4:	200000c8 	.word	0x200000c8

08008ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	af00      	add	r7, sp, #0
  return uwTick;
 8008adc:	4b03      	ldr	r3, [pc, #12]	@ (8008aec <HAL_GetTick+0x14>)
 8008ade:	681b      	ldr	r3, [r3, #0]
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	200000c8 	.word	0x200000c8

08008af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f003 0307 	and.w	r3, r3, #7
 8008afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008b00:	4b0c      	ldr	r3, [pc, #48]	@ (8008b34 <__NVIC_SetPriorityGrouping+0x44>)
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008b06:	68ba      	ldr	r2, [r7, #8]
 8008b08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008b0c:	4013      	ands	r3, r2
 8008b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008b18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008b1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008b22:	4a04      	ldr	r2, [pc, #16]	@ (8008b34 <__NVIC_SetPriorityGrouping+0x44>)
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	60d3      	str	r3, [r2, #12]
}
 8008b28:	bf00      	nop
 8008b2a:	3714      	adds	r7, #20
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr
 8008b34:	e000ed00 	.word	0xe000ed00

08008b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008b3c:	4b04      	ldr	r3, [pc, #16]	@ (8008b50 <__NVIC_GetPriorityGrouping+0x18>)
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	0a1b      	lsrs	r3, r3, #8
 8008b42:	f003 0307 	and.w	r3, r3, #7
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr
 8008b50:	e000ed00 	.word	0xe000ed00

08008b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	6039      	str	r1, [r7, #0]
 8008b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	db0a      	blt.n	8008b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	b2da      	uxtb	r2, r3
 8008b6c:	490c      	ldr	r1, [pc, #48]	@ (8008ba0 <__NVIC_SetPriority+0x4c>)
 8008b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b72:	0112      	lsls	r2, r2, #4
 8008b74:	b2d2      	uxtb	r2, r2
 8008b76:	440b      	add	r3, r1
 8008b78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008b7c:	e00a      	b.n	8008b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	b2da      	uxtb	r2, r3
 8008b82:	4908      	ldr	r1, [pc, #32]	@ (8008ba4 <__NVIC_SetPriority+0x50>)
 8008b84:	79fb      	ldrb	r3, [r7, #7]
 8008b86:	f003 030f 	and.w	r3, r3, #15
 8008b8a:	3b04      	subs	r3, #4
 8008b8c:	0112      	lsls	r2, r2, #4
 8008b8e:	b2d2      	uxtb	r2, r2
 8008b90:	440b      	add	r3, r1
 8008b92:	761a      	strb	r2, [r3, #24]
}
 8008b94:	bf00      	nop
 8008b96:	370c      	adds	r7, #12
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	e000e100 	.word	0xe000e100
 8008ba4:	e000ed00 	.word	0xe000ed00

08008ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b089      	sub	sp, #36	@ 0x24
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f003 0307 	and.w	r3, r3, #7
 8008bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	f1c3 0307 	rsb	r3, r3, #7
 8008bc2:	2b04      	cmp	r3, #4
 8008bc4:	bf28      	it	cs
 8008bc6:	2304      	movcs	r3, #4
 8008bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	3304      	adds	r3, #4
 8008bce:	2b06      	cmp	r3, #6
 8008bd0:	d902      	bls.n	8008bd8 <NVIC_EncodePriority+0x30>
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	3b03      	subs	r3, #3
 8008bd6:	e000      	b.n	8008bda <NVIC_EncodePriority+0x32>
 8008bd8:	2300      	movs	r3, #0
 8008bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	fa02 f303 	lsl.w	r3, r2, r3
 8008be6:	43da      	mvns	r2, r3
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	401a      	ands	r2, r3
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8008bfa:	43d9      	mvns	r1, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c00:	4313      	orrs	r3, r2
         );
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3724      	adds	r7, #36	@ 0x24
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
	...

08008c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	3b01      	subs	r3, #1
 8008c1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c20:	d301      	bcc.n	8008c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008c22:	2301      	movs	r3, #1
 8008c24:	e00f      	b.n	8008c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008c26:	4a0a      	ldr	r2, [pc, #40]	@ (8008c50 <SysTick_Config+0x40>)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008c2e:	210f      	movs	r1, #15
 8008c30:	f04f 30ff 	mov.w	r0, #4294967295
 8008c34:	f7ff ff8e 	bl	8008b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008c38:	4b05      	ldr	r3, [pc, #20]	@ (8008c50 <SysTick_Config+0x40>)
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008c3e:	4b04      	ldr	r3, [pc, #16]	@ (8008c50 <SysTick_Config+0x40>)
 8008c40:	2207      	movs	r2, #7
 8008c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3708      	adds	r7, #8
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	e000e010 	.word	0xe000e010

08008c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f7ff ff47 	bl	8008af0 <__NVIC_SetPriorityGrouping>
}
 8008c62:	bf00      	nop
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b086      	sub	sp, #24
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	4603      	mov	r3, r0
 8008c72:	60b9      	str	r1, [r7, #8]
 8008c74:	607a      	str	r2, [r7, #4]
 8008c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008c7c:	f7ff ff5c 	bl	8008b38 <__NVIC_GetPriorityGrouping>
 8008c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	68b9      	ldr	r1, [r7, #8]
 8008c86:	6978      	ldr	r0, [r7, #20]
 8008c88:	f7ff ff8e 	bl	8008ba8 <NVIC_EncodePriority>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c92:	4611      	mov	r1, r2
 8008c94:	4618      	mov	r0, r3
 8008c96:	f7ff ff5d 	bl	8008b54 <__NVIC_SetPriority>
}
 8008c9a:	bf00      	nop
 8008c9c:	3718      	adds	r7, #24
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b082      	sub	sp, #8
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f7ff ffb0 	bl	8008c10 <SysTick_Config>
 8008cb0:	4603      	mov	r3, r0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3708      	adds	r7, #8
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
	...

08008cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b089      	sub	sp, #36	@ 0x24
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	61fb      	str	r3, [r7, #28]
 8008cd6:	e16b      	b.n	8008fb0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008cd8:	2201      	movs	r2, #1
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	697a      	ldr	r2, [r7, #20]
 8008ce8:	4013      	ands	r3, r2
 8008cea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008cec:	693a      	ldr	r2, [r7, #16]
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	f040 815a 	bne.w	8008faa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	f003 0303 	and.w	r3, r3, #3
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	d005      	beq.n	8008d0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d130      	bne.n	8008d70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	005b      	lsls	r3, r3, #1
 8008d18:	2203      	movs	r2, #3
 8008d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d1e:	43db      	mvns	r3, r3
 8008d20:	69ba      	ldr	r2, [r7, #24]
 8008d22:	4013      	ands	r3, r2
 8008d24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	68da      	ldr	r2, [r3, #12]
 8008d2a:	69fb      	ldr	r3, [r7, #28]
 8008d2c:	005b      	lsls	r3, r3, #1
 8008d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d32:	69ba      	ldr	r2, [r7, #24]
 8008d34:	4313      	orrs	r3, r2
 8008d36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	69ba      	ldr	r2, [r7, #24]
 8008d3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008d44:	2201      	movs	r2, #1
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	fa02 f303 	lsl.w	r3, r2, r3
 8008d4c:	43db      	mvns	r3, r3
 8008d4e:	69ba      	ldr	r2, [r7, #24]
 8008d50:	4013      	ands	r3, r2
 8008d52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	091b      	lsrs	r3, r3, #4
 8008d5a:	f003 0201 	and.w	r2, r3, #1
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	fa02 f303 	lsl.w	r3, r2, r3
 8008d64:	69ba      	ldr	r2, [r7, #24]
 8008d66:	4313      	orrs	r3, r2
 8008d68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	69ba      	ldr	r2, [r7, #24]
 8008d6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	f003 0303 	and.w	r3, r3, #3
 8008d78:	2b03      	cmp	r3, #3
 8008d7a:	d017      	beq.n	8008dac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	005b      	lsls	r3, r3, #1
 8008d86:	2203      	movs	r2, #3
 8008d88:	fa02 f303 	lsl.w	r3, r2, r3
 8008d8c:	43db      	mvns	r3, r3
 8008d8e:	69ba      	ldr	r2, [r7, #24]
 8008d90:	4013      	ands	r3, r2
 8008d92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	689a      	ldr	r2, [r3, #8]
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	005b      	lsls	r3, r3, #1
 8008d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008da0:	69ba      	ldr	r2, [r7, #24]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	69ba      	ldr	r2, [r7, #24]
 8008daa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	f003 0303 	and.w	r3, r3, #3
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d123      	bne.n	8008e00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	08da      	lsrs	r2, r3, #3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	3208      	adds	r2, #8
 8008dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	f003 0307 	and.w	r3, r3, #7
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	220f      	movs	r2, #15
 8008dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008dd4:	43db      	mvns	r3, r3
 8008dd6:	69ba      	ldr	r2, [r7, #24]
 8008dd8:	4013      	ands	r3, r2
 8008dda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	691a      	ldr	r2, [r3, #16]
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	f003 0307 	and.w	r3, r3, #7
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	fa02 f303 	lsl.w	r3, r2, r3
 8008dec:	69ba      	ldr	r2, [r7, #24]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	08da      	lsrs	r2, r3, #3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	3208      	adds	r2, #8
 8008dfa:	69b9      	ldr	r1, [r7, #24]
 8008dfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	005b      	lsls	r3, r3, #1
 8008e0a:	2203      	movs	r2, #3
 8008e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e10:	43db      	mvns	r3, r3
 8008e12:	69ba      	ldr	r2, [r7, #24]
 8008e14:	4013      	ands	r3, r2
 8008e16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	f003 0203 	and.w	r2, r3, #3
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	005b      	lsls	r3, r3, #1
 8008e24:	fa02 f303 	lsl.w	r3, r2, r3
 8008e28:	69ba      	ldr	r2, [r7, #24]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	69ba      	ldr	r2, [r7, #24]
 8008e32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	f000 80b4 	beq.w	8008faa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e42:	2300      	movs	r3, #0
 8008e44:	60fb      	str	r3, [r7, #12]
 8008e46:	4b60      	ldr	r3, [pc, #384]	@ (8008fc8 <HAL_GPIO_Init+0x30c>)
 8008e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e4a:	4a5f      	ldr	r2, [pc, #380]	@ (8008fc8 <HAL_GPIO_Init+0x30c>)
 8008e4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008e50:	6453      	str	r3, [r2, #68]	@ 0x44
 8008e52:	4b5d      	ldr	r3, [pc, #372]	@ (8008fc8 <HAL_GPIO_Init+0x30c>)
 8008e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e5a:	60fb      	str	r3, [r7, #12]
 8008e5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008e5e:	4a5b      	ldr	r2, [pc, #364]	@ (8008fcc <HAL_GPIO_Init+0x310>)
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	089b      	lsrs	r3, r3, #2
 8008e64:	3302      	adds	r3, #2
 8008e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	f003 0303 	and.w	r3, r3, #3
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	220f      	movs	r2, #15
 8008e76:	fa02 f303 	lsl.w	r3, r2, r3
 8008e7a:	43db      	mvns	r3, r3
 8008e7c:	69ba      	ldr	r2, [r7, #24]
 8008e7e:	4013      	ands	r3, r2
 8008e80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a52      	ldr	r2, [pc, #328]	@ (8008fd0 <HAL_GPIO_Init+0x314>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d02b      	beq.n	8008ee2 <HAL_GPIO_Init+0x226>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a51      	ldr	r2, [pc, #324]	@ (8008fd4 <HAL_GPIO_Init+0x318>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d025      	beq.n	8008ede <HAL_GPIO_Init+0x222>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4a50      	ldr	r2, [pc, #320]	@ (8008fd8 <HAL_GPIO_Init+0x31c>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d01f      	beq.n	8008eda <HAL_GPIO_Init+0x21e>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4a4f      	ldr	r2, [pc, #316]	@ (8008fdc <HAL_GPIO_Init+0x320>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d019      	beq.n	8008ed6 <HAL_GPIO_Init+0x21a>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4a4e      	ldr	r2, [pc, #312]	@ (8008fe0 <HAL_GPIO_Init+0x324>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d013      	beq.n	8008ed2 <HAL_GPIO_Init+0x216>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4a4d      	ldr	r2, [pc, #308]	@ (8008fe4 <HAL_GPIO_Init+0x328>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d00d      	beq.n	8008ece <HAL_GPIO_Init+0x212>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4a4c      	ldr	r2, [pc, #304]	@ (8008fe8 <HAL_GPIO_Init+0x32c>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d007      	beq.n	8008eca <HAL_GPIO_Init+0x20e>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	4a4b      	ldr	r2, [pc, #300]	@ (8008fec <HAL_GPIO_Init+0x330>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d101      	bne.n	8008ec6 <HAL_GPIO_Init+0x20a>
 8008ec2:	2307      	movs	r3, #7
 8008ec4:	e00e      	b.n	8008ee4 <HAL_GPIO_Init+0x228>
 8008ec6:	2308      	movs	r3, #8
 8008ec8:	e00c      	b.n	8008ee4 <HAL_GPIO_Init+0x228>
 8008eca:	2306      	movs	r3, #6
 8008ecc:	e00a      	b.n	8008ee4 <HAL_GPIO_Init+0x228>
 8008ece:	2305      	movs	r3, #5
 8008ed0:	e008      	b.n	8008ee4 <HAL_GPIO_Init+0x228>
 8008ed2:	2304      	movs	r3, #4
 8008ed4:	e006      	b.n	8008ee4 <HAL_GPIO_Init+0x228>
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	e004      	b.n	8008ee4 <HAL_GPIO_Init+0x228>
 8008eda:	2302      	movs	r3, #2
 8008edc:	e002      	b.n	8008ee4 <HAL_GPIO_Init+0x228>
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e000      	b.n	8008ee4 <HAL_GPIO_Init+0x228>
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	69fa      	ldr	r2, [r7, #28]
 8008ee6:	f002 0203 	and.w	r2, r2, #3
 8008eea:	0092      	lsls	r2, r2, #2
 8008eec:	4093      	lsls	r3, r2
 8008eee:	69ba      	ldr	r2, [r7, #24]
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008ef4:	4935      	ldr	r1, [pc, #212]	@ (8008fcc <HAL_GPIO_Init+0x310>)
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	089b      	lsrs	r3, r3, #2
 8008efa:	3302      	adds	r3, #2
 8008efc:	69ba      	ldr	r2, [r7, #24]
 8008efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008f02:	4b3b      	ldr	r3, [pc, #236]	@ (8008ff0 <HAL_GPIO_Init+0x334>)
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	43db      	mvns	r3, r3
 8008f0c:	69ba      	ldr	r2, [r7, #24]
 8008f0e:	4013      	ands	r3, r2
 8008f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d003      	beq.n	8008f26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008f1e:	69ba      	ldr	r2, [r7, #24]
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008f26:	4a32      	ldr	r2, [pc, #200]	@ (8008ff0 <HAL_GPIO_Init+0x334>)
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008f2c:	4b30      	ldr	r3, [pc, #192]	@ (8008ff0 <HAL_GPIO_Init+0x334>)
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	43db      	mvns	r3, r3
 8008f36:	69ba      	ldr	r2, [r7, #24]
 8008f38:	4013      	ands	r3, r2
 8008f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d003      	beq.n	8008f50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008f48:	69ba      	ldr	r2, [r7, #24]
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008f50:	4a27      	ldr	r2, [pc, #156]	@ (8008ff0 <HAL_GPIO_Init+0x334>)
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008f56:	4b26      	ldr	r3, [pc, #152]	@ (8008ff0 <HAL_GPIO_Init+0x334>)
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	43db      	mvns	r3, r3
 8008f60:	69ba      	ldr	r2, [r7, #24]
 8008f62:	4013      	ands	r3, r2
 8008f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d003      	beq.n	8008f7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008f72:	69ba      	ldr	r2, [r7, #24]
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008f7a:	4a1d      	ldr	r2, [pc, #116]	@ (8008ff0 <HAL_GPIO_Init+0x334>)
 8008f7c:	69bb      	ldr	r3, [r7, #24]
 8008f7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008f80:	4b1b      	ldr	r3, [pc, #108]	@ (8008ff0 <HAL_GPIO_Init+0x334>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	43db      	mvns	r3, r3
 8008f8a:	69ba      	ldr	r2, [r7, #24]
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d003      	beq.n	8008fa4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008f9c:	69ba      	ldr	r2, [r7, #24]
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008fa4:	4a12      	ldr	r2, [pc, #72]	@ (8008ff0 <HAL_GPIO_Init+0x334>)
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	3301      	adds	r3, #1
 8008fae:	61fb      	str	r3, [r7, #28]
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	2b0f      	cmp	r3, #15
 8008fb4:	f67f ae90 	bls.w	8008cd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008fb8:	bf00      	nop
 8008fba:	bf00      	nop
 8008fbc:	3724      	adds	r7, #36	@ 0x24
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr
 8008fc6:	bf00      	nop
 8008fc8:	40023800 	.word	0x40023800
 8008fcc:	40013800 	.word	0x40013800
 8008fd0:	40020000 	.word	0x40020000
 8008fd4:	40020400 	.word	0x40020400
 8008fd8:	40020800 	.word	0x40020800
 8008fdc:	40020c00 	.word	0x40020c00
 8008fe0:	40021000 	.word	0x40021000
 8008fe4:	40021400 	.word	0x40021400
 8008fe8:	40021800 	.word	0x40021800
 8008fec:	40021c00 	.word	0x40021c00
 8008ff0:	40013c00 	.word	0x40013c00

08008ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	807b      	strh	r3, [r7, #2]
 8009000:	4613      	mov	r3, r2
 8009002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009004:	787b      	ldrb	r3, [r7, #1]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d003      	beq.n	8009012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800900a:	887a      	ldrh	r2, [r7, #2]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009010:	e003      	b.n	800901a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009012:	887b      	ldrh	r3, [r7, #2]
 8009014:	041a      	lsls	r2, r3, #16
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	619a      	str	r2, [r3, #24]
}
 800901a:	bf00      	nop
 800901c:	370c      	adds	r7, #12
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009026:	b480      	push	{r7}
 8009028:	b085      	sub	sp, #20
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
 800902e:	460b      	mov	r3, r1
 8009030:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	695b      	ldr	r3, [r3, #20]
 8009036:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009038:	887a      	ldrh	r2, [r7, #2]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	4013      	ands	r3, r2
 800903e:	041a      	lsls	r2, r3, #16
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	43d9      	mvns	r1, r3
 8009044:	887b      	ldrh	r3, [r7, #2]
 8009046:	400b      	ands	r3, r1
 8009048:	431a      	orrs	r2, r3
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	619a      	str	r2, [r3, #24]
}
 800904e:	bf00      	nop
 8009050:	3714      	adds	r7, #20
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr
	...

0800905c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b086      	sub	sp, #24
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d101      	bne.n	800906e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	e267      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f003 0301 	and.w	r3, r3, #1
 8009076:	2b00      	cmp	r3, #0
 8009078:	d075      	beq.n	8009166 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800907a:	4b88      	ldr	r3, [pc, #544]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	f003 030c 	and.w	r3, r3, #12
 8009082:	2b04      	cmp	r3, #4
 8009084:	d00c      	beq.n	80090a0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009086:	4b85      	ldr	r3, [pc, #532]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800908e:	2b08      	cmp	r3, #8
 8009090:	d112      	bne.n	80090b8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009092:	4b82      	ldr	r3, [pc, #520]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800909a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800909e:	d10b      	bne.n	80090b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80090a0:	4b7e      	ldr	r3, [pc, #504]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d05b      	beq.n	8009164 <HAL_RCC_OscConfig+0x108>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d157      	bne.n	8009164 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80090b4:	2301      	movs	r3, #1
 80090b6:	e242      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090c0:	d106      	bne.n	80090d0 <HAL_RCC_OscConfig+0x74>
 80090c2:	4b76      	ldr	r3, [pc, #472]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a75      	ldr	r2, [pc, #468]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 80090c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80090cc:	6013      	str	r3, [r2, #0]
 80090ce:	e01d      	b.n	800910c <HAL_RCC_OscConfig+0xb0>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80090d8:	d10c      	bne.n	80090f4 <HAL_RCC_OscConfig+0x98>
 80090da:	4b70      	ldr	r3, [pc, #448]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a6f      	ldr	r2, [pc, #444]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 80090e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80090e4:	6013      	str	r3, [r2, #0]
 80090e6:	4b6d      	ldr	r3, [pc, #436]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a6c      	ldr	r2, [pc, #432]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 80090ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80090f0:	6013      	str	r3, [r2, #0]
 80090f2:	e00b      	b.n	800910c <HAL_RCC_OscConfig+0xb0>
 80090f4:	4b69      	ldr	r3, [pc, #420]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a68      	ldr	r2, [pc, #416]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 80090fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090fe:	6013      	str	r3, [r2, #0]
 8009100:	4b66      	ldr	r3, [pc, #408]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a65      	ldr	r2, [pc, #404]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 8009106:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800910a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d013      	beq.n	800913c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009114:	f7ff fce0 	bl	8008ad8 <HAL_GetTick>
 8009118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800911a:	e008      	b.n	800912e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800911c:	f7ff fcdc 	bl	8008ad8 <HAL_GetTick>
 8009120:	4602      	mov	r2, r0
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	1ad3      	subs	r3, r2, r3
 8009126:	2b64      	cmp	r3, #100	@ 0x64
 8009128:	d901      	bls.n	800912e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800912a:	2303      	movs	r3, #3
 800912c:	e207      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800912e:	4b5b      	ldr	r3, [pc, #364]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009136:	2b00      	cmp	r3, #0
 8009138:	d0f0      	beq.n	800911c <HAL_RCC_OscConfig+0xc0>
 800913a:	e014      	b.n	8009166 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800913c:	f7ff fccc 	bl	8008ad8 <HAL_GetTick>
 8009140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009142:	e008      	b.n	8009156 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009144:	f7ff fcc8 	bl	8008ad8 <HAL_GetTick>
 8009148:	4602      	mov	r2, r0
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	1ad3      	subs	r3, r2, r3
 800914e:	2b64      	cmp	r3, #100	@ 0x64
 8009150:	d901      	bls.n	8009156 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009152:	2303      	movs	r3, #3
 8009154:	e1f3      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009156:	4b51      	ldr	r3, [pc, #324]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800915e:	2b00      	cmp	r3, #0
 8009160:	d1f0      	bne.n	8009144 <HAL_RCC_OscConfig+0xe8>
 8009162:	e000      	b.n	8009166 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f003 0302 	and.w	r3, r3, #2
 800916e:	2b00      	cmp	r3, #0
 8009170:	d063      	beq.n	800923a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009172:	4b4a      	ldr	r3, [pc, #296]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	f003 030c 	and.w	r3, r3, #12
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00b      	beq.n	8009196 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800917e:	4b47      	ldr	r3, [pc, #284]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 8009180:	689b      	ldr	r3, [r3, #8]
 8009182:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009186:	2b08      	cmp	r3, #8
 8009188:	d11c      	bne.n	80091c4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800918a:	4b44      	ldr	r3, [pc, #272]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009192:	2b00      	cmp	r3, #0
 8009194:	d116      	bne.n	80091c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009196:	4b41      	ldr	r3, [pc, #260]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f003 0302 	and.w	r3, r3, #2
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d005      	beq.n	80091ae <HAL_RCC_OscConfig+0x152>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d001      	beq.n	80091ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e1c7      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091ae:	4b3b      	ldr	r3, [pc, #236]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	691b      	ldr	r3, [r3, #16]
 80091ba:	00db      	lsls	r3, r3, #3
 80091bc:	4937      	ldr	r1, [pc, #220]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 80091be:	4313      	orrs	r3, r2
 80091c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80091c2:	e03a      	b.n	800923a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d020      	beq.n	800920e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80091cc:	4b34      	ldr	r3, [pc, #208]	@ (80092a0 <HAL_RCC_OscConfig+0x244>)
 80091ce:	2201      	movs	r2, #1
 80091d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091d2:	f7ff fc81 	bl	8008ad8 <HAL_GetTick>
 80091d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091d8:	e008      	b.n	80091ec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80091da:	f7ff fc7d 	bl	8008ad8 <HAL_GetTick>
 80091de:	4602      	mov	r2, r0
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	1ad3      	subs	r3, r2, r3
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d901      	bls.n	80091ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80091e8:	2303      	movs	r3, #3
 80091ea:	e1a8      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091ec:	4b2b      	ldr	r3, [pc, #172]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f003 0302 	and.w	r3, r3, #2
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d0f0      	beq.n	80091da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091f8:	4b28      	ldr	r3, [pc, #160]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	691b      	ldr	r3, [r3, #16]
 8009204:	00db      	lsls	r3, r3, #3
 8009206:	4925      	ldr	r1, [pc, #148]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 8009208:	4313      	orrs	r3, r2
 800920a:	600b      	str	r3, [r1, #0]
 800920c:	e015      	b.n	800923a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800920e:	4b24      	ldr	r3, [pc, #144]	@ (80092a0 <HAL_RCC_OscConfig+0x244>)
 8009210:	2200      	movs	r2, #0
 8009212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009214:	f7ff fc60 	bl	8008ad8 <HAL_GetTick>
 8009218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800921a:	e008      	b.n	800922e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800921c:	f7ff fc5c 	bl	8008ad8 <HAL_GetTick>
 8009220:	4602      	mov	r2, r0
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	1ad3      	subs	r3, r2, r3
 8009226:	2b02      	cmp	r3, #2
 8009228:	d901      	bls.n	800922e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800922a:	2303      	movs	r3, #3
 800922c:	e187      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800922e:	4b1b      	ldr	r3, [pc, #108]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f003 0302 	and.w	r3, r3, #2
 8009236:	2b00      	cmp	r3, #0
 8009238:	d1f0      	bne.n	800921c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 0308 	and.w	r3, r3, #8
 8009242:	2b00      	cmp	r3, #0
 8009244:	d036      	beq.n	80092b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	695b      	ldr	r3, [r3, #20]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d016      	beq.n	800927c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800924e:	4b15      	ldr	r3, [pc, #84]	@ (80092a4 <HAL_RCC_OscConfig+0x248>)
 8009250:	2201      	movs	r2, #1
 8009252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009254:	f7ff fc40 	bl	8008ad8 <HAL_GetTick>
 8009258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800925a:	e008      	b.n	800926e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800925c:	f7ff fc3c 	bl	8008ad8 <HAL_GetTick>
 8009260:	4602      	mov	r2, r0
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	1ad3      	subs	r3, r2, r3
 8009266:	2b02      	cmp	r3, #2
 8009268:	d901      	bls.n	800926e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800926a:	2303      	movs	r3, #3
 800926c:	e167      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800926e:	4b0b      	ldr	r3, [pc, #44]	@ (800929c <HAL_RCC_OscConfig+0x240>)
 8009270:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009272:	f003 0302 	and.w	r3, r3, #2
 8009276:	2b00      	cmp	r3, #0
 8009278:	d0f0      	beq.n	800925c <HAL_RCC_OscConfig+0x200>
 800927a:	e01b      	b.n	80092b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800927c:	4b09      	ldr	r3, [pc, #36]	@ (80092a4 <HAL_RCC_OscConfig+0x248>)
 800927e:	2200      	movs	r2, #0
 8009280:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009282:	f7ff fc29 	bl	8008ad8 <HAL_GetTick>
 8009286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009288:	e00e      	b.n	80092a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800928a:	f7ff fc25 	bl	8008ad8 <HAL_GetTick>
 800928e:	4602      	mov	r2, r0
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	1ad3      	subs	r3, r2, r3
 8009294:	2b02      	cmp	r3, #2
 8009296:	d907      	bls.n	80092a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009298:	2303      	movs	r3, #3
 800929a:	e150      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
 800929c:	40023800 	.word	0x40023800
 80092a0:	42470000 	.word	0x42470000
 80092a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80092a8:	4b88      	ldr	r3, [pc, #544]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 80092aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092ac:	f003 0302 	and.w	r3, r3, #2
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d1ea      	bne.n	800928a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f003 0304 	and.w	r3, r3, #4
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f000 8097 	beq.w	80093f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80092c2:	2300      	movs	r3, #0
 80092c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80092c6:	4b81      	ldr	r3, [pc, #516]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 80092c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d10f      	bne.n	80092f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80092d2:	2300      	movs	r3, #0
 80092d4:	60bb      	str	r3, [r7, #8]
 80092d6:	4b7d      	ldr	r3, [pc, #500]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 80092d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092da:	4a7c      	ldr	r2, [pc, #496]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 80092dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80092e2:	4b7a      	ldr	r3, [pc, #488]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 80092e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092ea:	60bb      	str	r3, [r7, #8]
 80092ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80092ee:	2301      	movs	r3, #1
 80092f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092f2:	4b77      	ldr	r3, [pc, #476]	@ (80094d0 <HAL_RCC_OscConfig+0x474>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d118      	bne.n	8009330 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80092fe:	4b74      	ldr	r3, [pc, #464]	@ (80094d0 <HAL_RCC_OscConfig+0x474>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a73      	ldr	r2, [pc, #460]	@ (80094d0 <HAL_RCC_OscConfig+0x474>)
 8009304:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800930a:	f7ff fbe5 	bl	8008ad8 <HAL_GetTick>
 800930e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009310:	e008      	b.n	8009324 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009312:	f7ff fbe1 	bl	8008ad8 <HAL_GetTick>
 8009316:	4602      	mov	r2, r0
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	1ad3      	subs	r3, r2, r3
 800931c:	2b02      	cmp	r3, #2
 800931e:	d901      	bls.n	8009324 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009320:	2303      	movs	r3, #3
 8009322:	e10c      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009324:	4b6a      	ldr	r3, [pc, #424]	@ (80094d0 <HAL_RCC_OscConfig+0x474>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800932c:	2b00      	cmp	r3, #0
 800932e:	d0f0      	beq.n	8009312 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	2b01      	cmp	r3, #1
 8009336:	d106      	bne.n	8009346 <HAL_RCC_OscConfig+0x2ea>
 8009338:	4b64      	ldr	r3, [pc, #400]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 800933a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800933c:	4a63      	ldr	r2, [pc, #396]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 800933e:	f043 0301 	orr.w	r3, r3, #1
 8009342:	6713      	str	r3, [r2, #112]	@ 0x70
 8009344:	e01c      	b.n	8009380 <HAL_RCC_OscConfig+0x324>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	2b05      	cmp	r3, #5
 800934c:	d10c      	bne.n	8009368 <HAL_RCC_OscConfig+0x30c>
 800934e:	4b5f      	ldr	r3, [pc, #380]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 8009350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009352:	4a5e      	ldr	r2, [pc, #376]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 8009354:	f043 0304 	orr.w	r3, r3, #4
 8009358:	6713      	str	r3, [r2, #112]	@ 0x70
 800935a:	4b5c      	ldr	r3, [pc, #368]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 800935c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800935e:	4a5b      	ldr	r2, [pc, #364]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 8009360:	f043 0301 	orr.w	r3, r3, #1
 8009364:	6713      	str	r3, [r2, #112]	@ 0x70
 8009366:	e00b      	b.n	8009380 <HAL_RCC_OscConfig+0x324>
 8009368:	4b58      	ldr	r3, [pc, #352]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 800936a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800936c:	4a57      	ldr	r2, [pc, #348]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 800936e:	f023 0301 	bic.w	r3, r3, #1
 8009372:	6713      	str	r3, [r2, #112]	@ 0x70
 8009374:	4b55      	ldr	r3, [pc, #340]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 8009376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009378:	4a54      	ldr	r2, [pc, #336]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 800937a:	f023 0304 	bic.w	r3, r3, #4
 800937e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d015      	beq.n	80093b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009388:	f7ff fba6 	bl	8008ad8 <HAL_GetTick>
 800938c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800938e:	e00a      	b.n	80093a6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009390:	f7ff fba2 	bl	8008ad8 <HAL_GetTick>
 8009394:	4602      	mov	r2, r0
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	1ad3      	subs	r3, r2, r3
 800939a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800939e:	4293      	cmp	r3, r2
 80093a0:	d901      	bls.n	80093a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80093a2:	2303      	movs	r3, #3
 80093a4:	e0cb      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80093a6:	4b49      	ldr	r3, [pc, #292]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 80093a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093aa:	f003 0302 	and.w	r3, r3, #2
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d0ee      	beq.n	8009390 <HAL_RCC_OscConfig+0x334>
 80093b2:	e014      	b.n	80093de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80093b4:	f7ff fb90 	bl	8008ad8 <HAL_GetTick>
 80093b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80093ba:	e00a      	b.n	80093d2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093bc:	f7ff fb8c 	bl	8008ad8 <HAL_GetTick>
 80093c0:	4602      	mov	r2, r0
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	1ad3      	subs	r3, r2, r3
 80093c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d901      	bls.n	80093d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80093ce:	2303      	movs	r3, #3
 80093d0:	e0b5      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80093d2:	4b3e      	ldr	r3, [pc, #248]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 80093d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093d6:	f003 0302 	and.w	r3, r3, #2
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d1ee      	bne.n	80093bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80093de:	7dfb      	ldrb	r3, [r7, #23]
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d105      	bne.n	80093f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80093e4:	4b39      	ldr	r3, [pc, #228]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 80093e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093e8:	4a38      	ldr	r2, [pc, #224]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 80093ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80093ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	699b      	ldr	r3, [r3, #24]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f000 80a1 	beq.w	800953c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80093fa:	4b34      	ldr	r3, [pc, #208]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	f003 030c 	and.w	r3, r3, #12
 8009402:	2b08      	cmp	r3, #8
 8009404:	d05c      	beq.n	80094c0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	699b      	ldr	r3, [r3, #24]
 800940a:	2b02      	cmp	r3, #2
 800940c:	d141      	bne.n	8009492 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800940e:	4b31      	ldr	r3, [pc, #196]	@ (80094d4 <HAL_RCC_OscConfig+0x478>)
 8009410:	2200      	movs	r2, #0
 8009412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009414:	f7ff fb60 	bl	8008ad8 <HAL_GetTick>
 8009418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800941a:	e008      	b.n	800942e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800941c:	f7ff fb5c 	bl	8008ad8 <HAL_GetTick>
 8009420:	4602      	mov	r2, r0
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	1ad3      	subs	r3, r2, r3
 8009426:	2b02      	cmp	r3, #2
 8009428:	d901      	bls.n	800942e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800942a:	2303      	movs	r3, #3
 800942c:	e087      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800942e:	4b27      	ldr	r3, [pc, #156]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1f0      	bne.n	800941c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	69da      	ldr	r2, [r3, #28]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6a1b      	ldr	r3, [r3, #32]
 8009442:	431a      	orrs	r2, r3
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009448:	019b      	lsls	r3, r3, #6
 800944a:	431a      	orrs	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009450:	085b      	lsrs	r3, r3, #1
 8009452:	3b01      	subs	r3, #1
 8009454:	041b      	lsls	r3, r3, #16
 8009456:	431a      	orrs	r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800945c:	061b      	lsls	r3, r3, #24
 800945e:	491b      	ldr	r1, [pc, #108]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 8009460:	4313      	orrs	r3, r2
 8009462:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009464:	4b1b      	ldr	r3, [pc, #108]	@ (80094d4 <HAL_RCC_OscConfig+0x478>)
 8009466:	2201      	movs	r2, #1
 8009468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800946a:	f7ff fb35 	bl	8008ad8 <HAL_GetTick>
 800946e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009470:	e008      	b.n	8009484 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009472:	f7ff fb31 	bl	8008ad8 <HAL_GetTick>
 8009476:	4602      	mov	r2, r0
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	1ad3      	subs	r3, r2, r3
 800947c:	2b02      	cmp	r3, #2
 800947e:	d901      	bls.n	8009484 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009480:	2303      	movs	r3, #3
 8009482:	e05c      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009484:	4b11      	ldr	r3, [pc, #68]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800948c:	2b00      	cmp	r3, #0
 800948e:	d0f0      	beq.n	8009472 <HAL_RCC_OscConfig+0x416>
 8009490:	e054      	b.n	800953c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009492:	4b10      	ldr	r3, [pc, #64]	@ (80094d4 <HAL_RCC_OscConfig+0x478>)
 8009494:	2200      	movs	r2, #0
 8009496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009498:	f7ff fb1e 	bl	8008ad8 <HAL_GetTick>
 800949c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800949e:	e008      	b.n	80094b2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094a0:	f7ff fb1a 	bl	8008ad8 <HAL_GetTick>
 80094a4:	4602      	mov	r2, r0
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	1ad3      	subs	r3, r2, r3
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	d901      	bls.n	80094b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80094ae:	2303      	movs	r3, #3
 80094b0:	e045      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094b2:	4b06      	ldr	r3, [pc, #24]	@ (80094cc <HAL_RCC_OscConfig+0x470>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1f0      	bne.n	80094a0 <HAL_RCC_OscConfig+0x444>
 80094be:	e03d      	b.n	800953c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	699b      	ldr	r3, [r3, #24]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d107      	bne.n	80094d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	e038      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
 80094cc:	40023800 	.word	0x40023800
 80094d0:	40007000 	.word	0x40007000
 80094d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80094d8:	4b1b      	ldr	r3, [pc, #108]	@ (8009548 <HAL_RCC_OscConfig+0x4ec>)
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	699b      	ldr	r3, [r3, #24]
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d028      	beq.n	8009538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d121      	bne.n	8009538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094fe:	429a      	cmp	r2, r3
 8009500:	d11a      	bne.n	8009538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009508:	4013      	ands	r3, r2
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800950e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009510:	4293      	cmp	r3, r2
 8009512:	d111      	bne.n	8009538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800951e:	085b      	lsrs	r3, r3, #1
 8009520:	3b01      	subs	r3, #1
 8009522:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009524:	429a      	cmp	r2, r3
 8009526:	d107      	bne.n	8009538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009532:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009534:	429a      	cmp	r2, r3
 8009536:	d001      	beq.n	800953c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	e000      	b.n	800953e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3718      	adds	r7, #24
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	40023800 	.word	0x40023800

0800954c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d101      	bne.n	8009560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	e0cc      	b.n	80096fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009560:	4b68      	ldr	r3, [pc, #416]	@ (8009704 <HAL_RCC_ClockConfig+0x1b8>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f003 0307 	and.w	r3, r3, #7
 8009568:	683a      	ldr	r2, [r7, #0]
 800956a:	429a      	cmp	r2, r3
 800956c:	d90c      	bls.n	8009588 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800956e:	4b65      	ldr	r3, [pc, #404]	@ (8009704 <HAL_RCC_ClockConfig+0x1b8>)
 8009570:	683a      	ldr	r2, [r7, #0]
 8009572:	b2d2      	uxtb	r2, r2
 8009574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009576:	4b63      	ldr	r3, [pc, #396]	@ (8009704 <HAL_RCC_ClockConfig+0x1b8>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 0307 	and.w	r3, r3, #7
 800957e:	683a      	ldr	r2, [r7, #0]
 8009580:	429a      	cmp	r2, r3
 8009582:	d001      	beq.n	8009588 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	e0b8      	b.n	80096fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f003 0302 	and.w	r3, r3, #2
 8009590:	2b00      	cmp	r3, #0
 8009592:	d020      	beq.n	80095d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f003 0304 	and.w	r3, r3, #4
 800959c:	2b00      	cmp	r3, #0
 800959e:	d005      	beq.n	80095ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80095a0:	4b59      	ldr	r3, [pc, #356]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	4a58      	ldr	r2, [pc, #352]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 80095a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80095aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f003 0308 	and.w	r3, r3, #8
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d005      	beq.n	80095c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80095b8:	4b53      	ldr	r3, [pc, #332]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	4a52      	ldr	r2, [pc, #328]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 80095be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80095c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80095c4:	4b50      	ldr	r3, [pc, #320]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	494d      	ldr	r1, [pc, #308]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 80095d2:	4313      	orrs	r3, r2
 80095d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f003 0301 	and.w	r3, r3, #1
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d044      	beq.n	800966c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d107      	bne.n	80095fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80095ea:	4b47      	ldr	r3, [pc, #284]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d119      	bne.n	800962a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80095f6:	2301      	movs	r3, #1
 80095f8:	e07f      	b.n	80096fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	2b02      	cmp	r3, #2
 8009600:	d003      	beq.n	800960a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009606:	2b03      	cmp	r3, #3
 8009608:	d107      	bne.n	800961a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800960a:	4b3f      	ldr	r3, [pc, #252]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009612:	2b00      	cmp	r3, #0
 8009614:	d109      	bne.n	800962a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	e06f      	b.n	80096fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800961a:	4b3b      	ldr	r3, [pc, #236]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f003 0302 	and.w	r3, r3, #2
 8009622:	2b00      	cmp	r3, #0
 8009624:	d101      	bne.n	800962a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009626:	2301      	movs	r3, #1
 8009628:	e067      	b.n	80096fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800962a:	4b37      	ldr	r3, [pc, #220]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	f023 0203 	bic.w	r2, r3, #3
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	4934      	ldr	r1, [pc, #208]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 8009638:	4313      	orrs	r3, r2
 800963a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800963c:	f7ff fa4c 	bl	8008ad8 <HAL_GetTick>
 8009640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009642:	e00a      	b.n	800965a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009644:	f7ff fa48 	bl	8008ad8 <HAL_GetTick>
 8009648:	4602      	mov	r2, r0
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	1ad3      	subs	r3, r2, r3
 800964e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009652:	4293      	cmp	r3, r2
 8009654:	d901      	bls.n	800965a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009656:	2303      	movs	r3, #3
 8009658:	e04f      	b.n	80096fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800965a:	4b2b      	ldr	r3, [pc, #172]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	f003 020c 	and.w	r2, r3, #12
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	429a      	cmp	r2, r3
 800966a:	d1eb      	bne.n	8009644 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800966c:	4b25      	ldr	r3, [pc, #148]	@ (8009704 <HAL_RCC_ClockConfig+0x1b8>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f003 0307 	and.w	r3, r3, #7
 8009674:	683a      	ldr	r2, [r7, #0]
 8009676:	429a      	cmp	r2, r3
 8009678:	d20c      	bcs.n	8009694 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800967a:	4b22      	ldr	r3, [pc, #136]	@ (8009704 <HAL_RCC_ClockConfig+0x1b8>)
 800967c:	683a      	ldr	r2, [r7, #0]
 800967e:	b2d2      	uxtb	r2, r2
 8009680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009682:	4b20      	ldr	r3, [pc, #128]	@ (8009704 <HAL_RCC_ClockConfig+0x1b8>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f003 0307 	and.w	r3, r3, #7
 800968a:	683a      	ldr	r2, [r7, #0]
 800968c:	429a      	cmp	r2, r3
 800968e:	d001      	beq.n	8009694 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009690:	2301      	movs	r3, #1
 8009692:	e032      	b.n	80096fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f003 0304 	and.w	r3, r3, #4
 800969c:	2b00      	cmp	r3, #0
 800969e:	d008      	beq.n	80096b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80096a0:	4b19      	ldr	r3, [pc, #100]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	4916      	ldr	r1, [pc, #88]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 80096ae:	4313      	orrs	r3, r2
 80096b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f003 0308 	and.w	r3, r3, #8
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d009      	beq.n	80096d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80096be:	4b12      	ldr	r3, [pc, #72]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	691b      	ldr	r3, [r3, #16]
 80096ca:	00db      	lsls	r3, r3, #3
 80096cc:	490e      	ldr	r1, [pc, #56]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 80096ce:	4313      	orrs	r3, r2
 80096d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80096d2:	f000 f821 	bl	8009718 <HAL_RCC_GetSysClockFreq>
 80096d6:	4602      	mov	r2, r0
 80096d8:	4b0b      	ldr	r3, [pc, #44]	@ (8009708 <HAL_RCC_ClockConfig+0x1bc>)
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	091b      	lsrs	r3, r3, #4
 80096de:	f003 030f 	and.w	r3, r3, #15
 80096e2:	490a      	ldr	r1, [pc, #40]	@ (800970c <HAL_RCC_ClockConfig+0x1c0>)
 80096e4:	5ccb      	ldrb	r3, [r1, r3]
 80096e6:	fa22 f303 	lsr.w	r3, r2, r3
 80096ea:	4a09      	ldr	r2, [pc, #36]	@ (8009710 <HAL_RCC_ClockConfig+0x1c4>)
 80096ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80096ee:	4b09      	ldr	r3, [pc, #36]	@ (8009714 <HAL_RCC_ClockConfig+0x1c8>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7ff f9ac 	bl	8008a50 <HAL_InitTick>

  return HAL_OK;
 80096f8:	2300      	movs	r3, #0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3710      	adds	r7, #16
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	40023c00 	.word	0x40023c00
 8009708:	40023800 	.word	0x40023800
 800970c:	0800a4b4 	.word	0x0800a4b4
 8009710:	20000000 	.word	0x20000000
 8009714:	20000004 	.word	0x20000004

08009718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800971c:	b090      	sub	sp, #64	@ 0x40
 800971e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009720:	2300      	movs	r3, #0
 8009722:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8009724:	2300      	movs	r3, #0
 8009726:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8009728:	2300      	movs	r3, #0
 800972a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800972c:	2300      	movs	r3, #0
 800972e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009730:	4b59      	ldr	r3, [pc, #356]	@ (8009898 <HAL_RCC_GetSysClockFreq+0x180>)
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	f003 030c 	and.w	r3, r3, #12
 8009738:	2b08      	cmp	r3, #8
 800973a:	d00d      	beq.n	8009758 <HAL_RCC_GetSysClockFreq+0x40>
 800973c:	2b08      	cmp	r3, #8
 800973e:	f200 80a1 	bhi.w	8009884 <HAL_RCC_GetSysClockFreq+0x16c>
 8009742:	2b00      	cmp	r3, #0
 8009744:	d002      	beq.n	800974c <HAL_RCC_GetSysClockFreq+0x34>
 8009746:	2b04      	cmp	r3, #4
 8009748:	d003      	beq.n	8009752 <HAL_RCC_GetSysClockFreq+0x3a>
 800974a:	e09b      	b.n	8009884 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800974c:	4b53      	ldr	r3, [pc, #332]	@ (800989c <HAL_RCC_GetSysClockFreq+0x184>)
 800974e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009750:	e09b      	b.n	800988a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009752:	4b53      	ldr	r3, [pc, #332]	@ (80098a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8009754:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009756:	e098      	b.n	800988a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009758:	4b4f      	ldr	r3, [pc, #316]	@ (8009898 <HAL_RCC_GetSysClockFreq+0x180>)
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009760:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009762:	4b4d      	ldr	r3, [pc, #308]	@ (8009898 <HAL_RCC_GetSysClockFreq+0x180>)
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800976a:	2b00      	cmp	r3, #0
 800976c:	d028      	beq.n	80097c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800976e:	4b4a      	ldr	r3, [pc, #296]	@ (8009898 <HAL_RCC_GetSysClockFreq+0x180>)
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	099b      	lsrs	r3, r3, #6
 8009774:	2200      	movs	r2, #0
 8009776:	623b      	str	r3, [r7, #32]
 8009778:	627a      	str	r2, [r7, #36]	@ 0x24
 800977a:	6a3b      	ldr	r3, [r7, #32]
 800977c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009780:	2100      	movs	r1, #0
 8009782:	4b47      	ldr	r3, [pc, #284]	@ (80098a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8009784:	fb03 f201 	mul.w	r2, r3, r1
 8009788:	2300      	movs	r3, #0
 800978a:	fb00 f303 	mul.w	r3, r0, r3
 800978e:	4413      	add	r3, r2
 8009790:	4a43      	ldr	r2, [pc, #268]	@ (80098a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8009792:	fba0 1202 	umull	r1, r2, r0, r2
 8009796:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009798:	460a      	mov	r2, r1
 800979a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800979c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800979e:	4413      	add	r3, r2
 80097a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80097a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097a4:	2200      	movs	r2, #0
 80097a6:	61bb      	str	r3, [r7, #24]
 80097a8:	61fa      	str	r2, [r7, #28]
 80097aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80097ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80097b2:	f7fe fd09 	bl	80081c8 <__aeabi_uldivmod>
 80097b6:	4602      	mov	r2, r0
 80097b8:	460b      	mov	r3, r1
 80097ba:	4613      	mov	r3, r2
 80097bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097be:	e053      	b.n	8009868 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80097c0:	4b35      	ldr	r3, [pc, #212]	@ (8009898 <HAL_RCC_GetSysClockFreq+0x180>)
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	099b      	lsrs	r3, r3, #6
 80097c6:	2200      	movs	r2, #0
 80097c8:	613b      	str	r3, [r7, #16]
 80097ca:	617a      	str	r2, [r7, #20]
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80097d2:	f04f 0b00 	mov.w	fp, #0
 80097d6:	4652      	mov	r2, sl
 80097d8:	465b      	mov	r3, fp
 80097da:	f04f 0000 	mov.w	r0, #0
 80097de:	f04f 0100 	mov.w	r1, #0
 80097e2:	0159      	lsls	r1, r3, #5
 80097e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80097e8:	0150      	lsls	r0, r2, #5
 80097ea:	4602      	mov	r2, r0
 80097ec:	460b      	mov	r3, r1
 80097ee:	ebb2 080a 	subs.w	r8, r2, sl
 80097f2:	eb63 090b 	sbc.w	r9, r3, fp
 80097f6:	f04f 0200 	mov.w	r2, #0
 80097fa:	f04f 0300 	mov.w	r3, #0
 80097fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009802:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009806:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800980a:	ebb2 0408 	subs.w	r4, r2, r8
 800980e:	eb63 0509 	sbc.w	r5, r3, r9
 8009812:	f04f 0200 	mov.w	r2, #0
 8009816:	f04f 0300 	mov.w	r3, #0
 800981a:	00eb      	lsls	r3, r5, #3
 800981c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009820:	00e2      	lsls	r2, r4, #3
 8009822:	4614      	mov	r4, r2
 8009824:	461d      	mov	r5, r3
 8009826:	eb14 030a 	adds.w	r3, r4, sl
 800982a:	603b      	str	r3, [r7, #0]
 800982c:	eb45 030b 	adc.w	r3, r5, fp
 8009830:	607b      	str	r3, [r7, #4]
 8009832:	f04f 0200 	mov.w	r2, #0
 8009836:	f04f 0300 	mov.w	r3, #0
 800983a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800983e:	4629      	mov	r1, r5
 8009840:	028b      	lsls	r3, r1, #10
 8009842:	4621      	mov	r1, r4
 8009844:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009848:	4621      	mov	r1, r4
 800984a:	028a      	lsls	r2, r1, #10
 800984c:	4610      	mov	r0, r2
 800984e:	4619      	mov	r1, r3
 8009850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009852:	2200      	movs	r2, #0
 8009854:	60bb      	str	r3, [r7, #8]
 8009856:	60fa      	str	r2, [r7, #12]
 8009858:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800985c:	f7fe fcb4 	bl	80081c8 <__aeabi_uldivmod>
 8009860:	4602      	mov	r2, r0
 8009862:	460b      	mov	r3, r1
 8009864:	4613      	mov	r3, r2
 8009866:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8009868:	4b0b      	ldr	r3, [pc, #44]	@ (8009898 <HAL_RCC_GetSysClockFreq+0x180>)
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	0c1b      	lsrs	r3, r3, #16
 800986e:	f003 0303 	and.w	r3, r3, #3
 8009872:	3301      	adds	r3, #1
 8009874:	005b      	lsls	r3, r3, #1
 8009876:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8009878:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800987a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800987c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009880:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009882:	e002      	b.n	800988a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009884:	4b05      	ldr	r3, [pc, #20]	@ (800989c <HAL_RCC_GetSysClockFreq+0x184>)
 8009886:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009888:	bf00      	nop
    }
  }
  return sysclockfreq;
 800988a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800988c:	4618      	mov	r0, r3
 800988e:	3740      	adds	r7, #64	@ 0x40
 8009890:	46bd      	mov	sp, r7
 8009892:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009896:	bf00      	nop
 8009898:	40023800 	.word	0x40023800
 800989c:	00f42400 	.word	0x00f42400
 80098a0:	017d7840 	.word	0x017d7840

080098a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80098a4:	b480      	push	{r7}
 80098a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80098a8:	4b03      	ldr	r3, [pc, #12]	@ (80098b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80098aa:	681b      	ldr	r3, [r3, #0]
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr
 80098b6:	bf00      	nop
 80098b8:	20000000 	.word	0x20000000

080098bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80098c0:	f7ff fff0 	bl	80098a4 <HAL_RCC_GetHCLKFreq>
 80098c4:	4602      	mov	r2, r0
 80098c6:	4b05      	ldr	r3, [pc, #20]	@ (80098dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	0a9b      	lsrs	r3, r3, #10
 80098cc:	f003 0307 	and.w	r3, r3, #7
 80098d0:	4903      	ldr	r1, [pc, #12]	@ (80098e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80098d2:	5ccb      	ldrb	r3, [r1, r3]
 80098d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80098d8:	4618      	mov	r0, r3
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	40023800 	.word	0x40023800
 80098e0:	0800a4c4 	.word	0x0800a4c4

080098e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80098e8:	f7ff ffdc 	bl	80098a4 <HAL_RCC_GetHCLKFreq>
 80098ec:	4602      	mov	r2, r0
 80098ee:	4b05      	ldr	r3, [pc, #20]	@ (8009904 <HAL_RCC_GetPCLK2Freq+0x20>)
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	0b5b      	lsrs	r3, r3, #13
 80098f4:	f003 0307 	and.w	r3, r3, #7
 80098f8:	4903      	ldr	r1, [pc, #12]	@ (8009908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80098fa:	5ccb      	ldrb	r3, [r1, r3]
 80098fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009900:	4618      	mov	r0, r3
 8009902:	bd80      	pop	{r7, pc}
 8009904:	40023800 	.word	0x40023800
 8009908:	0800a4c4 	.word	0x0800a4c4

0800990c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d101      	bne.n	800991e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800991a:	2301      	movs	r3, #1
 800991c:	e041      	b.n	80099a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009924:	b2db      	uxtb	r3, r3
 8009926:	2b00      	cmp	r3, #0
 8009928:	d106      	bne.n	8009938 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f7fe ff3e 	bl	80087b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2202      	movs	r2, #2
 800993c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	3304      	adds	r3, #4
 8009948:	4619      	mov	r1, r3
 800994a:	4610      	mov	r0, r2
 800994c:	f000 f8f4 	bl	8009b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3708      	adds	r7, #8
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}

080099aa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b084      	sub	sp, #16
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
 80099b2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80099b4:	2300      	movs	r3, #0
 80099b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d101      	bne.n	80099c6 <HAL_TIM_ConfigClockSource+0x1c>
 80099c2:	2302      	movs	r3, #2
 80099c4:	e0b4      	b.n	8009b30 <HAL_TIM_ConfigClockSource+0x186>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2201      	movs	r2, #1
 80099ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2202      	movs	r2, #2
 80099d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80099e4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80099ec:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	68ba      	ldr	r2, [r7, #8]
 80099f4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099fe:	d03e      	beq.n	8009a7e <HAL_TIM_ConfigClockSource+0xd4>
 8009a00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a04:	f200 8087 	bhi.w	8009b16 <HAL_TIM_ConfigClockSource+0x16c>
 8009a08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a0c:	f000 8086 	beq.w	8009b1c <HAL_TIM_ConfigClockSource+0x172>
 8009a10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a14:	d87f      	bhi.n	8009b16 <HAL_TIM_ConfigClockSource+0x16c>
 8009a16:	2b70      	cmp	r3, #112	@ 0x70
 8009a18:	d01a      	beq.n	8009a50 <HAL_TIM_ConfigClockSource+0xa6>
 8009a1a:	2b70      	cmp	r3, #112	@ 0x70
 8009a1c:	d87b      	bhi.n	8009b16 <HAL_TIM_ConfigClockSource+0x16c>
 8009a1e:	2b60      	cmp	r3, #96	@ 0x60
 8009a20:	d050      	beq.n	8009ac4 <HAL_TIM_ConfigClockSource+0x11a>
 8009a22:	2b60      	cmp	r3, #96	@ 0x60
 8009a24:	d877      	bhi.n	8009b16 <HAL_TIM_ConfigClockSource+0x16c>
 8009a26:	2b50      	cmp	r3, #80	@ 0x50
 8009a28:	d03c      	beq.n	8009aa4 <HAL_TIM_ConfigClockSource+0xfa>
 8009a2a:	2b50      	cmp	r3, #80	@ 0x50
 8009a2c:	d873      	bhi.n	8009b16 <HAL_TIM_ConfigClockSource+0x16c>
 8009a2e:	2b40      	cmp	r3, #64	@ 0x40
 8009a30:	d058      	beq.n	8009ae4 <HAL_TIM_ConfigClockSource+0x13a>
 8009a32:	2b40      	cmp	r3, #64	@ 0x40
 8009a34:	d86f      	bhi.n	8009b16 <HAL_TIM_ConfigClockSource+0x16c>
 8009a36:	2b30      	cmp	r3, #48	@ 0x30
 8009a38:	d064      	beq.n	8009b04 <HAL_TIM_ConfigClockSource+0x15a>
 8009a3a:	2b30      	cmp	r3, #48	@ 0x30
 8009a3c:	d86b      	bhi.n	8009b16 <HAL_TIM_ConfigClockSource+0x16c>
 8009a3e:	2b20      	cmp	r3, #32
 8009a40:	d060      	beq.n	8009b04 <HAL_TIM_ConfigClockSource+0x15a>
 8009a42:	2b20      	cmp	r3, #32
 8009a44:	d867      	bhi.n	8009b16 <HAL_TIM_ConfigClockSource+0x16c>
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d05c      	beq.n	8009b04 <HAL_TIM_ConfigClockSource+0x15a>
 8009a4a:	2b10      	cmp	r3, #16
 8009a4c:	d05a      	beq.n	8009b04 <HAL_TIM_ConfigClockSource+0x15a>
 8009a4e:	e062      	b.n	8009b16 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a60:	f000 f990 	bl	8009d84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009a72:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	68ba      	ldr	r2, [r7, #8]
 8009a7a:	609a      	str	r2, [r3, #8]
      break;
 8009a7c:	e04f      	b.n	8009b1e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a8e:	f000 f979 	bl	8009d84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	689a      	ldr	r2, [r3, #8]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009aa0:	609a      	str	r2, [r3, #8]
      break;
 8009aa2:	e03c      	b.n	8009b1e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	f000 f8ed 	bl	8009c90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2150      	movs	r1, #80	@ 0x50
 8009abc:	4618      	mov	r0, r3
 8009abe:	f000 f946 	bl	8009d4e <TIM_ITRx_SetConfig>
      break;
 8009ac2:	e02c      	b.n	8009b1e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	f000 f90c 	bl	8009cee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2160      	movs	r1, #96	@ 0x60
 8009adc:	4618      	mov	r0, r3
 8009ade:	f000 f936 	bl	8009d4e <TIM_ITRx_SetConfig>
      break;
 8009ae2:	e01c      	b.n	8009b1e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009af0:	461a      	mov	r2, r3
 8009af2:	f000 f8cd 	bl	8009c90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	2140      	movs	r1, #64	@ 0x40
 8009afc:	4618      	mov	r0, r3
 8009afe:	f000 f926 	bl	8009d4e <TIM_ITRx_SetConfig>
      break;
 8009b02:	e00c      	b.n	8009b1e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	4610      	mov	r0, r2
 8009b10:	f000 f91d 	bl	8009d4e <TIM_ITRx_SetConfig>
      break;
 8009b14:	e003      	b.n	8009b1e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009b16:	2301      	movs	r3, #1
 8009b18:	73fb      	strb	r3, [r7, #15]
      break;
 8009b1a:	e000      	b.n	8009b1e <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009b1c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2201      	movs	r2, #1
 8009b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3710      	adds	r7, #16
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b085      	sub	sp, #20
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4a46      	ldr	r2, [pc, #280]	@ (8009c64 <TIM_Base_SetConfig+0x12c>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d013      	beq.n	8009b78 <TIM_Base_SetConfig+0x40>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b56:	d00f      	beq.n	8009b78 <TIM_Base_SetConfig+0x40>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a43      	ldr	r2, [pc, #268]	@ (8009c68 <TIM_Base_SetConfig+0x130>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d00b      	beq.n	8009b78 <TIM_Base_SetConfig+0x40>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a42      	ldr	r2, [pc, #264]	@ (8009c6c <TIM_Base_SetConfig+0x134>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d007      	beq.n	8009b78 <TIM_Base_SetConfig+0x40>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4a41      	ldr	r2, [pc, #260]	@ (8009c70 <TIM_Base_SetConfig+0x138>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d003      	beq.n	8009b78 <TIM_Base_SetConfig+0x40>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	4a40      	ldr	r2, [pc, #256]	@ (8009c74 <TIM_Base_SetConfig+0x13c>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d108      	bne.n	8009b8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	68fa      	ldr	r2, [r7, #12]
 8009b86:	4313      	orrs	r3, r2
 8009b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4a35      	ldr	r2, [pc, #212]	@ (8009c64 <TIM_Base_SetConfig+0x12c>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d02b      	beq.n	8009bea <TIM_Base_SetConfig+0xb2>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b98:	d027      	beq.n	8009bea <TIM_Base_SetConfig+0xb2>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	4a32      	ldr	r2, [pc, #200]	@ (8009c68 <TIM_Base_SetConfig+0x130>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d023      	beq.n	8009bea <TIM_Base_SetConfig+0xb2>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	4a31      	ldr	r2, [pc, #196]	@ (8009c6c <TIM_Base_SetConfig+0x134>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d01f      	beq.n	8009bea <TIM_Base_SetConfig+0xb2>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4a30      	ldr	r2, [pc, #192]	@ (8009c70 <TIM_Base_SetConfig+0x138>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d01b      	beq.n	8009bea <TIM_Base_SetConfig+0xb2>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	4a2f      	ldr	r2, [pc, #188]	@ (8009c74 <TIM_Base_SetConfig+0x13c>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d017      	beq.n	8009bea <TIM_Base_SetConfig+0xb2>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4a2e      	ldr	r2, [pc, #184]	@ (8009c78 <TIM_Base_SetConfig+0x140>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d013      	beq.n	8009bea <TIM_Base_SetConfig+0xb2>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4a2d      	ldr	r2, [pc, #180]	@ (8009c7c <TIM_Base_SetConfig+0x144>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d00f      	beq.n	8009bea <TIM_Base_SetConfig+0xb2>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4a2c      	ldr	r2, [pc, #176]	@ (8009c80 <TIM_Base_SetConfig+0x148>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d00b      	beq.n	8009bea <TIM_Base_SetConfig+0xb2>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	4a2b      	ldr	r2, [pc, #172]	@ (8009c84 <TIM_Base_SetConfig+0x14c>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d007      	beq.n	8009bea <TIM_Base_SetConfig+0xb2>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	4a2a      	ldr	r2, [pc, #168]	@ (8009c88 <TIM_Base_SetConfig+0x150>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d003      	beq.n	8009bea <TIM_Base_SetConfig+0xb2>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	4a29      	ldr	r2, [pc, #164]	@ (8009c8c <TIM_Base_SetConfig+0x154>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d108      	bne.n	8009bfc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	68fa      	ldr	r2, [r7, #12]
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	695b      	ldr	r3, [r3, #20]
 8009c06:	4313      	orrs	r3, r2
 8009c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	68fa      	ldr	r2, [r7, #12]
 8009c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	689a      	ldr	r2, [r3, #8]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4a10      	ldr	r2, [pc, #64]	@ (8009c64 <TIM_Base_SetConfig+0x12c>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d003      	beq.n	8009c30 <TIM_Base_SetConfig+0xf8>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	4a12      	ldr	r2, [pc, #72]	@ (8009c74 <TIM_Base_SetConfig+0x13c>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d103      	bne.n	8009c38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	691a      	ldr	r2, [r3, #16]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	691b      	ldr	r3, [r3, #16]
 8009c42:	f003 0301 	and.w	r3, r3, #1
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d105      	bne.n	8009c56 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	691b      	ldr	r3, [r3, #16]
 8009c4e:	f023 0201 	bic.w	r2, r3, #1
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	611a      	str	r2, [r3, #16]
  }
}
 8009c56:	bf00      	nop
 8009c58:	3714      	adds	r7, #20
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	40010000 	.word	0x40010000
 8009c68:	40000400 	.word	0x40000400
 8009c6c:	40000800 	.word	0x40000800
 8009c70:	40000c00 	.word	0x40000c00
 8009c74:	40010400 	.word	0x40010400
 8009c78:	40014000 	.word	0x40014000
 8009c7c:	40014400 	.word	0x40014400
 8009c80:	40014800 	.word	0x40014800
 8009c84:	40001800 	.word	0x40001800
 8009c88:	40001c00 	.word	0x40001c00
 8009c8c:	40002000 	.word	0x40002000

08009c90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b087      	sub	sp, #28
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6a1b      	ldr	r3, [r3, #32]
 8009ca0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	6a1b      	ldr	r3, [r3, #32]
 8009ca6:	f023 0201 	bic.w	r2, r3, #1
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	699b      	ldr	r3, [r3, #24]
 8009cb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009cba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	011b      	lsls	r3, r3, #4
 8009cc0:	693a      	ldr	r2, [r7, #16]
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	f023 030a 	bic.w	r3, r3, #10
 8009ccc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009cce:	697a      	ldr	r2, [r7, #20]
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	693a      	ldr	r2, [r7, #16]
 8009cda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	697a      	ldr	r2, [r7, #20]
 8009ce0:	621a      	str	r2, [r3, #32]
}
 8009ce2:	bf00      	nop
 8009ce4:	371c      	adds	r7, #28
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr

08009cee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009cee:	b480      	push	{r7}
 8009cf0:	b087      	sub	sp, #28
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	60f8      	str	r0, [r7, #12]
 8009cf6:	60b9      	str	r1, [r7, #8]
 8009cf8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	6a1b      	ldr	r3, [r3, #32]
 8009cfe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	6a1b      	ldr	r3, [r3, #32]
 8009d04:	f023 0210 	bic.w	r2, r3, #16
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	699b      	ldr	r3, [r3, #24]
 8009d10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009d18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	031b      	lsls	r3, r3, #12
 8009d1e:	693a      	ldr	r2, [r7, #16]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009d2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	011b      	lsls	r3, r3, #4
 8009d30:	697a      	ldr	r2, [r7, #20]
 8009d32:	4313      	orrs	r3, r2
 8009d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	693a      	ldr	r2, [r7, #16]
 8009d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	697a      	ldr	r2, [r7, #20]
 8009d40:	621a      	str	r2, [r3, #32]
}
 8009d42:	bf00      	nop
 8009d44:	371c      	adds	r7, #28
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr

08009d4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d4e:	b480      	push	{r7}
 8009d50:	b085      	sub	sp, #20
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
 8009d56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d66:	683a      	ldr	r2, [r7, #0]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	f043 0307 	orr.w	r3, r3, #7
 8009d70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	609a      	str	r2, [r3, #8]
}
 8009d78:	bf00      	nop
 8009d7a:	3714      	adds	r7, #20
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b087      	sub	sp, #28
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	607a      	str	r2, [r7, #4]
 8009d90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009d9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	021a      	lsls	r2, r3, #8
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	431a      	orrs	r2, r3
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	4313      	orrs	r3, r2
 8009dac:	697a      	ldr	r2, [r7, #20]
 8009dae:	4313      	orrs	r3, r2
 8009db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	697a      	ldr	r2, [r7, #20]
 8009db6:	609a      	str	r2, [r3, #8]
}
 8009db8:	bf00      	nop
 8009dba:	371c      	adds	r7, #28
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b085      	sub	sp, #20
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d101      	bne.n	8009ddc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009dd8:	2302      	movs	r3, #2
 8009dda:	e05a      	b.n	8009e92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2201      	movs	r2, #1
 8009de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2202      	movs	r2, #2
 8009de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	68fa      	ldr	r2, [r7, #12]
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	68fa      	ldr	r2, [r7, #12]
 8009e14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a21      	ldr	r2, [pc, #132]	@ (8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d022      	beq.n	8009e66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e28:	d01d      	beq.n	8009e66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a1d      	ldr	r2, [pc, #116]	@ (8009ea4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d018      	beq.n	8009e66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a1b      	ldr	r2, [pc, #108]	@ (8009ea8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d013      	beq.n	8009e66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a1a      	ldr	r2, [pc, #104]	@ (8009eac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d00e      	beq.n	8009e66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a18      	ldr	r2, [pc, #96]	@ (8009eb0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d009      	beq.n	8009e66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a17      	ldr	r2, [pc, #92]	@ (8009eb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d004      	beq.n	8009e66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a15      	ldr	r2, [pc, #84]	@ (8009eb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d10c      	bne.n	8009e80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	68ba      	ldr	r2, [r7, #8]
 8009e74:	4313      	orrs	r3, r2
 8009e76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	68ba      	ldr	r2, [r7, #8]
 8009e7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009e90:	2300      	movs	r3, #0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3714      	adds	r7, #20
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	40010000 	.word	0x40010000
 8009ea4:	40000400 	.word	0x40000400
 8009ea8:	40000800 	.word	0x40000800
 8009eac:	40000c00 	.word	0x40000c00
 8009eb0:	40010400 	.word	0x40010400
 8009eb4:	40014000 	.word	0x40014000
 8009eb8:	40001800 	.word	0x40001800

08009ebc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d101      	bne.n	8009ece <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	e042      	b.n	8009f54 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d106      	bne.n	8009ee8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f7fe fc86 	bl	80087f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2224      	movs	r2, #36	@ 0x24
 8009eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	68da      	ldr	r2, [r3, #12]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009efe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 f82b 	bl	8009f5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	691a      	ldr	r2, [r3, #16]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009f14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	695a      	ldr	r2, [r3, #20]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009f24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	68da      	ldr	r2, [r3, #12]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009f34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2220      	movs	r2, #32
 8009f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2220      	movs	r2, #32
 8009f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3708      	adds	r7, #8
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f60:	b0c0      	sub	sp, #256	@ 0x100
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	691b      	ldr	r3, [r3, #16]
 8009f70:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f78:	68d9      	ldr	r1, [r3, #12]
 8009f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	ea40 0301 	orr.w	r3, r0, r1
 8009f84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f8a:	689a      	ldr	r2, [r3, #8]
 8009f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	431a      	orrs	r2, r3
 8009f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f98:	695b      	ldr	r3, [r3, #20]
 8009f9a:	431a      	orrs	r2, r3
 8009f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fa0:	69db      	ldr	r3, [r3, #28]
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009fb4:	f021 010c 	bic.w	r1, r1, #12
 8009fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009fc2:	430b      	orrs	r3, r1
 8009fc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	695b      	ldr	r3, [r3, #20]
 8009fce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fd6:	6999      	ldr	r1, [r3, #24]
 8009fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	ea40 0301 	orr.w	r3, r0, r1
 8009fe2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	4b8f      	ldr	r3, [pc, #572]	@ (800a228 <UART_SetConfig+0x2cc>)
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d005      	beq.n	8009ffc <UART_SetConfig+0xa0>
 8009ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	4b8d      	ldr	r3, [pc, #564]	@ (800a22c <UART_SetConfig+0x2d0>)
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d104      	bne.n	800a006 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009ffc:	f7ff fc72 	bl	80098e4 <HAL_RCC_GetPCLK2Freq>
 800a000:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a004:	e003      	b.n	800a00e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a006:	f7ff fc59 	bl	80098bc <HAL_RCC_GetPCLK1Freq>
 800a00a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a00e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a012:	69db      	ldr	r3, [r3, #28]
 800a014:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a018:	f040 810c 	bne.w	800a234 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a01c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a020:	2200      	movs	r2, #0
 800a022:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a026:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a02a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a02e:	4622      	mov	r2, r4
 800a030:	462b      	mov	r3, r5
 800a032:	1891      	adds	r1, r2, r2
 800a034:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a036:	415b      	adcs	r3, r3
 800a038:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a03a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a03e:	4621      	mov	r1, r4
 800a040:	eb12 0801 	adds.w	r8, r2, r1
 800a044:	4629      	mov	r1, r5
 800a046:	eb43 0901 	adc.w	r9, r3, r1
 800a04a:	f04f 0200 	mov.w	r2, #0
 800a04e:	f04f 0300 	mov.w	r3, #0
 800a052:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a056:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a05a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a05e:	4690      	mov	r8, r2
 800a060:	4699      	mov	r9, r3
 800a062:	4623      	mov	r3, r4
 800a064:	eb18 0303 	adds.w	r3, r8, r3
 800a068:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a06c:	462b      	mov	r3, r5
 800a06e:	eb49 0303 	adc.w	r3, r9, r3
 800a072:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a082:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a086:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a08a:	460b      	mov	r3, r1
 800a08c:	18db      	adds	r3, r3, r3
 800a08e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a090:	4613      	mov	r3, r2
 800a092:	eb42 0303 	adc.w	r3, r2, r3
 800a096:	657b      	str	r3, [r7, #84]	@ 0x54
 800a098:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a09c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a0a0:	f7fe f892 	bl	80081c8 <__aeabi_uldivmod>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	4b61      	ldr	r3, [pc, #388]	@ (800a230 <UART_SetConfig+0x2d4>)
 800a0aa:	fba3 2302 	umull	r2, r3, r3, r2
 800a0ae:	095b      	lsrs	r3, r3, #5
 800a0b0:	011c      	lsls	r4, r3, #4
 800a0b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a0bc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a0c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a0c4:	4642      	mov	r2, r8
 800a0c6:	464b      	mov	r3, r9
 800a0c8:	1891      	adds	r1, r2, r2
 800a0ca:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a0cc:	415b      	adcs	r3, r3
 800a0ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a0d4:	4641      	mov	r1, r8
 800a0d6:	eb12 0a01 	adds.w	sl, r2, r1
 800a0da:	4649      	mov	r1, r9
 800a0dc:	eb43 0b01 	adc.w	fp, r3, r1
 800a0e0:	f04f 0200 	mov.w	r2, #0
 800a0e4:	f04f 0300 	mov.w	r3, #0
 800a0e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a0ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a0f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a0f4:	4692      	mov	sl, r2
 800a0f6:	469b      	mov	fp, r3
 800a0f8:	4643      	mov	r3, r8
 800a0fa:	eb1a 0303 	adds.w	r3, sl, r3
 800a0fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a102:	464b      	mov	r3, r9
 800a104:	eb4b 0303 	adc.w	r3, fp, r3
 800a108:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a10c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a118:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a11c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a120:	460b      	mov	r3, r1
 800a122:	18db      	adds	r3, r3, r3
 800a124:	643b      	str	r3, [r7, #64]	@ 0x40
 800a126:	4613      	mov	r3, r2
 800a128:	eb42 0303 	adc.w	r3, r2, r3
 800a12c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a12e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a132:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a136:	f7fe f847 	bl	80081c8 <__aeabi_uldivmod>
 800a13a:	4602      	mov	r2, r0
 800a13c:	460b      	mov	r3, r1
 800a13e:	4611      	mov	r1, r2
 800a140:	4b3b      	ldr	r3, [pc, #236]	@ (800a230 <UART_SetConfig+0x2d4>)
 800a142:	fba3 2301 	umull	r2, r3, r3, r1
 800a146:	095b      	lsrs	r3, r3, #5
 800a148:	2264      	movs	r2, #100	@ 0x64
 800a14a:	fb02 f303 	mul.w	r3, r2, r3
 800a14e:	1acb      	subs	r3, r1, r3
 800a150:	00db      	lsls	r3, r3, #3
 800a152:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a156:	4b36      	ldr	r3, [pc, #216]	@ (800a230 <UART_SetConfig+0x2d4>)
 800a158:	fba3 2302 	umull	r2, r3, r3, r2
 800a15c:	095b      	lsrs	r3, r3, #5
 800a15e:	005b      	lsls	r3, r3, #1
 800a160:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a164:	441c      	add	r4, r3
 800a166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a16a:	2200      	movs	r2, #0
 800a16c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a170:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a174:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a178:	4642      	mov	r2, r8
 800a17a:	464b      	mov	r3, r9
 800a17c:	1891      	adds	r1, r2, r2
 800a17e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a180:	415b      	adcs	r3, r3
 800a182:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a184:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a188:	4641      	mov	r1, r8
 800a18a:	1851      	adds	r1, r2, r1
 800a18c:	6339      	str	r1, [r7, #48]	@ 0x30
 800a18e:	4649      	mov	r1, r9
 800a190:	414b      	adcs	r3, r1
 800a192:	637b      	str	r3, [r7, #52]	@ 0x34
 800a194:	f04f 0200 	mov.w	r2, #0
 800a198:	f04f 0300 	mov.w	r3, #0
 800a19c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a1a0:	4659      	mov	r1, fp
 800a1a2:	00cb      	lsls	r3, r1, #3
 800a1a4:	4651      	mov	r1, sl
 800a1a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1aa:	4651      	mov	r1, sl
 800a1ac:	00ca      	lsls	r2, r1, #3
 800a1ae:	4610      	mov	r0, r2
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	4642      	mov	r2, r8
 800a1b6:	189b      	adds	r3, r3, r2
 800a1b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a1bc:	464b      	mov	r3, r9
 800a1be:	460a      	mov	r2, r1
 800a1c0:	eb42 0303 	adc.w	r3, r2, r3
 800a1c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a1c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a1d4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a1d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a1dc:	460b      	mov	r3, r1
 800a1de:	18db      	adds	r3, r3, r3
 800a1e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	eb42 0303 	adc.w	r3, r2, r3
 800a1e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a1ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a1ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a1f2:	f7fd ffe9 	bl	80081c8 <__aeabi_uldivmod>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	4b0d      	ldr	r3, [pc, #52]	@ (800a230 <UART_SetConfig+0x2d4>)
 800a1fc:	fba3 1302 	umull	r1, r3, r3, r2
 800a200:	095b      	lsrs	r3, r3, #5
 800a202:	2164      	movs	r1, #100	@ 0x64
 800a204:	fb01 f303 	mul.w	r3, r1, r3
 800a208:	1ad3      	subs	r3, r2, r3
 800a20a:	00db      	lsls	r3, r3, #3
 800a20c:	3332      	adds	r3, #50	@ 0x32
 800a20e:	4a08      	ldr	r2, [pc, #32]	@ (800a230 <UART_SetConfig+0x2d4>)
 800a210:	fba2 2303 	umull	r2, r3, r2, r3
 800a214:	095b      	lsrs	r3, r3, #5
 800a216:	f003 0207 	and.w	r2, r3, #7
 800a21a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4422      	add	r2, r4
 800a222:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a224:	e106      	b.n	800a434 <UART_SetConfig+0x4d8>
 800a226:	bf00      	nop
 800a228:	40011000 	.word	0x40011000
 800a22c:	40011400 	.word	0x40011400
 800a230:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a234:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a238:	2200      	movs	r2, #0
 800a23a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a23e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a242:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a246:	4642      	mov	r2, r8
 800a248:	464b      	mov	r3, r9
 800a24a:	1891      	adds	r1, r2, r2
 800a24c:	6239      	str	r1, [r7, #32]
 800a24e:	415b      	adcs	r3, r3
 800a250:	627b      	str	r3, [r7, #36]	@ 0x24
 800a252:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a256:	4641      	mov	r1, r8
 800a258:	1854      	adds	r4, r2, r1
 800a25a:	4649      	mov	r1, r9
 800a25c:	eb43 0501 	adc.w	r5, r3, r1
 800a260:	f04f 0200 	mov.w	r2, #0
 800a264:	f04f 0300 	mov.w	r3, #0
 800a268:	00eb      	lsls	r3, r5, #3
 800a26a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a26e:	00e2      	lsls	r2, r4, #3
 800a270:	4614      	mov	r4, r2
 800a272:	461d      	mov	r5, r3
 800a274:	4643      	mov	r3, r8
 800a276:	18e3      	adds	r3, r4, r3
 800a278:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a27c:	464b      	mov	r3, r9
 800a27e:	eb45 0303 	adc.w	r3, r5, r3
 800a282:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a28a:	685b      	ldr	r3, [r3, #4]
 800a28c:	2200      	movs	r2, #0
 800a28e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a292:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a296:	f04f 0200 	mov.w	r2, #0
 800a29a:	f04f 0300 	mov.w	r3, #0
 800a29e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a2a2:	4629      	mov	r1, r5
 800a2a4:	008b      	lsls	r3, r1, #2
 800a2a6:	4621      	mov	r1, r4
 800a2a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a2ac:	4621      	mov	r1, r4
 800a2ae:	008a      	lsls	r2, r1, #2
 800a2b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a2b4:	f7fd ff88 	bl	80081c8 <__aeabi_uldivmod>
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	460b      	mov	r3, r1
 800a2bc:	4b60      	ldr	r3, [pc, #384]	@ (800a440 <UART_SetConfig+0x4e4>)
 800a2be:	fba3 2302 	umull	r2, r3, r3, r2
 800a2c2:	095b      	lsrs	r3, r3, #5
 800a2c4:	011c      	lsls	r4, r3, #4
 800a2c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a2d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a2d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a2d8:	4642      	mov	r2, r8
 800a2da:	464b      	mov	r3, r9
 800a2dc:	1891      	adds	r1, r2, r2
 800a2de:	61b9      	str	r1, [r7, #24]
 800a2e0:	415b      	adcs	r3, r3
 800a2e2:	61fb      	str	r3, [r7, #28]
 800a2e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a2e8:	4641      	mov	r1, r8
 800a2ea:	1851      	adds	r1, r2, r1
 800a2ec:	6139      	str	r1, [r7, #16]
 800a2ee:	4649      	mov	r1, r9
 800a2f0:	414b      	adcs	r3, r1
 800a2f2:	617b      	str	r3, [r7, #20]
 800a2f4:	f04f 0200 	mov.w	r2, #0
 800a2f8:	f04f 0300 	mov.w	r3, #0
 800a2fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a300:	4659      	mov	r1, fp
 800a302:	00cb      	lsls	r3, r1, #3
 800a304:	4651      	mov	r1, sl
 800a306:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a30a:	4651      	mov	r1, sl
 800a30c:	00ca      	lsls	r2, r1, #3
 800a30e:	4610      	mov	r0, r2
 800a310:	4619      	mov	r1, r3
 800a312:	4603      	mov	r3, r0
 800a314:	4642      	mov	r2, r8
 800a316:	189b      	adds	r3, r3, r2
 800a318:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a31c:	464b      	mov	r3, r9
 800a31e:	460a      	mov	r2, r1
 800a320:	eb42 0303 	adc.w	r3, r2, r3
 800a324:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a332:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a334:	f04f 0200 	mov.w	r2, #0
 800a338:	f04f 0300 	mov.w	r3, #0
 800a33c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a340:	4649      	mov	r1, r9
 800a342:	008b      	lsls	r3, r1, #2
 800a344:	4641      	mov	r1, r8
 800a346:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a34a:	4641      	mov	r1, r8
 800a34c:	008a      	lsls	r2, r1, #2
 800a34e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a352:	f7fd ff39 	bl	80081c8 <__aeabi_uldivmod>
 800a356:	4602      	mov	r2, r0
 800a358:	460b      	mov	r3, r1
 800a35a:	4611      	mov	r1, r2
 800a35c:	4b38      	ldr	r3, [pc, #224]	@ (800a440 <UART_SetConfig+0x4e4>)
 800a35e:	fba3 2301 	umull	r2, r3, r3, r1
 800a362:	095b      	lsrs	r3, r3, #5
 800a364:	2264      	movs	r2, #100	@ 0x64
 800a366:	fb02 f303 	mul.w	r3, r2, r3
 800a36a:	1acb      	subs	r3, r1, r3
 800a36c:	011b      	lsls	r3, r3, #4
 800a36e:	3332      	adds	r3, #50	@ 0x32
 800a370:	4a33      	ldr	r2, [pc, #204]	@ (800a440 <UART_SetConfig+0x4e4>)
 800a372:	fba2 2303 	umull	r2, r3, r2, r3
 800a376:	095b      	lsrs	r3, r3, #5
 800a378:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a37c:	441c      	add	r4, r3
 800a37e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a382:	2200      	movs	r2, #0
 800a384:	673b      	str	r3, [r7, #112]	@ 0x70
 800a386:	677a      	str	r2, [r7, #116]	@ 0x74
 800a388:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a38c:	4642      	mov	r2, r8
 800a38e:	464b      	mov	r3, r9
 800a390:	1891      	adds	r1, r2, r2
 800a392:	60b9      	str	r1, [r7, #8]
 800a394:	415b      	adcs	r3, r3
 800a396:	60fb      	str	r3, [r7, #12]
 800a398:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a39c:	4641      	mov	r1, r8
 800a39e:	1851      	adds	r1, r2, r1
 800a3a0:	6039      	str	r1, [r7, #0]
 800a3a2:	4649      	mov	r1, r9
 800a3a4:	414b      	adcs	r3, r1
 800a3a6:	607b      	str	r3, [r7, #4]
 800a3a8:	f04f 0200 	mov.w	r2, #0
 800a3ac:	f04f 0300 	mov.w	r3, #0
 800a3b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a3b4:	4659      	mov	r1, fp
 800a3b6:	00cb      	lsls	r3, r1, #3
 800a3b8:	4651      	mov	r1, sl
 800a3ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a3be:	4651      	mov	r1, sl
 800a3c0:	00ca      	lsls	r2, r1, #3
 800a3c2:	4610      	mov	r0, r2
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	4642      	mov	r2, r8
 800a3ca:	189b      	adds	r3, r3, r2
 800a3cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a3ce:	464b      	mov	r3, r9
 800a3d0:	460a      	mov	r2, r1
 800a3d2:	eb42 0303 	adc.w	r3, r2, r3
 800a3d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a3d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	663b      	str	r3, [r7, #96]	@ 0x60
 800a3e2:	667a      	str	r2, [r7, #100]	@ 0x64
 800a3e4:	f04f 0200 	mov.w	r2, #0
 800a3e8:	f04f 0300 	mov.w	r3, #0
 800a3ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a3f0:	4649      	mov	r1, r9
 800a3f2:	008b      	lsls	r3, r1, #2
 800a3f4:	4641      	mov	r1, r8
 800a3f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a3fa:	4641      	mov	r1, r8
 800a3fc:	008a      	lsls	r2, r1, #2
 800a3fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a402:	f7fd fee1 	bl	80081c8 <__aeabi_uldivmod>
 800a406:	4602      	mov	r2, r0
 800a408:	460b      	mov	r3, r1
 800a40a:	4b0d      	ldr	r3, [pc, #52]	@ (800a440 <UART_SetConfig+0x4e4>)
 800a40c:	fba3 1302 	umull	r1, r3, r3, r2
 800a410:	095b      	lsrs	r3, r3, #5
 800a412:	2164      	movs	r1, #100	@ 0x64
 800a414:	fb01 f303 	mul.w	r3, r1, r3
 800a418:	1ad3      	subs	r3, r2, r3
 800a41a:	011b      	lsls	r3, r3, #4
 800a41c:	3332      	adds	r3, #50	@ 0x32
 800a41e:	4a08      	ldr	r2, [pc, #32]	@ (800a440 <UART_SetConfig+0x4e4>)
 800a420:	fba2 2303 	umull	r2, r3, r2, r3
 800a424:	095b      	lsrs	r3, r3, #5
 800a426:	f003 020f 	and.w	r2, r3, #15
 800a42a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4422      	add	r2, r4
 800a432:	609a      	str	r2, [r3, #8]
}
 800a434:	bf00      	nop
 800a436:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a43a:	46bd      	mov	sp, r7
 800a43c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a440:	51eb851f 	.word	0x51eb851f

0800a444 <memset>:
 800a444:	4402      	add	r2, r0
 800a446:	4603      	mov	r3, r0
 800a448:	4293      	cmp	r3, r2
 800a44a:	d100      	bne.n	800a44e <memset+0xa>
 800a44c:	4770      	bx	lr
 800a44e:	f803 1b01 	strb.w	r1, [r3], #1
 800a452:	e7f9      	b.n	800a448 <memset+0x4>

0800a454 <__libc_init_array>:
 800a454:	b570      	push	{r4, r5, r6, lr}
 800a456:	4d0d      	ldr	r5, [pc, #52]	@ (800a48c <__libc_init_array+0x38>)
 800a458:	4c0d      	ldr	r4, [pc, #52]	@ (800a490 <__libc_init_array+0x3c>)
 800a45a:	1b64      	subs	r4, r4, r5
 800a45c:	10a4      	asrs	r4, r4, #2
 800a45e:	2600      	movs	r6, #0
 800a460:	42a6      	cmp	r6, r4
 800a462:	d109      	bne.n	800a478 <__libc_init_array+0x24>
 800a464:	4d0b      	ldr	r5, [pc, #44]	@ (800a494 <__libc_init_array+0x40>)
 800a466:	4c0c      	ldr	r4, [pc, #48]	@ (800a498 <__libc_init_array+0x44>)
 800a468:	f000 f818 	bl	800a49c <_init>
 800a46c:	1b64      	subs	r4, r4, r5
 800a46e:	10a4      	asrs	r4, r4, #2
 800a470:	2600      	movs	r6, #0
 800a472:	42a6      	cmp	r6, r4
 800a474:	d105      	bne.n	800a482 <__libc_init_array+0x2e>
 800a476:	bd70      	pop	{r4, r5, r6, pc}
 800a478:	f855 3b04 	ldr.w	r3, [r5], #4
 800a47c:	4798      	blx	r3
 800a47e:	3601      	adds	r6, #1
 800a480:	e7ee      	b.n	800a460 <__libc_init_array+0xc>
 800a482:	f855 3b04 	ldr.w	r3, [r5], #4
 800a486:	4798      	blx	r3
 800a488:	3601      	adds	r6, #1
 800a48a:	e7f2      	b.n	800a472 <__libc_init_array+0x1e>
 800a48c:	0800a4d4 	.word	0x0800a4d4
 800a490:	0800a4d4 	.word	0x0800a4d4
 800a494:	0800a4d4 	.word	0x0800a4d4
 800a498:	0800a4d8 	.word	0x0800a4d8

0800a49c <_init>:
 800a49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a49e:	bf00      	nop
 800a4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4a2:	bc08      	pop	{r3}
 800a4a4:	469e      	mov	lr, r3
 800a4a6:	4770      	bx	lr

0800a4a8 <_fini>:
 800a4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4aa:	bf00      	nop
 800a4ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4ae:	bc08      	pop	{r3}
 800a4b0:	469e      	mov	lr, r3
 800a4b2:	4770      	bx	lr
